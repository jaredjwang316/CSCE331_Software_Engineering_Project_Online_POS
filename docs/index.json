{
  "api/WebApp.AI.Chatbot.html": {
    "href": "api/WebApp.AI.Chatbot.html",
    "title": "Class Chatbot | Gong Cha",
    "keywords": "Class Chatbot Namespace WebApp.AI Assembly WebApp.dll public class Chatbot : Core Inheritance object Core Chatbot Inherited Members Core._systemPrompt Core._client Core._options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Chatbot(string?, int, float) public Chatbot(string? systemPrompt = null, int maxTokens = 400, float temperature = 0.9) Parameters systemPrompt string maxTokens int temperature float Methods AddHistory(string) public void AddHistory(string message) Parameters message string Run(string, int, int, int, Action<string>?) public Task<string> Run(string query, int timeoutMillisecodns = 10000, int retryDelayMilliseconds = 1000, int maxRetries = 3, Action<string>? callback = null) Parameters query string timeoutMillisecodns int retryDelayMilliseconds int maxRetries int callback Action<string> Returns Task<string>"
  },
  "api/WebApp.AI.Core.html": {
    "href": "api/WebApp.AI.Core.html",
    "title": "Class Core | Gong Cha",
    "keywords": "Class Core Namespace WebApp.AI Assembly WebApp.dll public class Core Inheritance object Core Derived Chatbot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Core(string, int, float) protected Core(string systemPrompt, int maxTokens, float temperature) Parameters systemPrompt string maxTokens int temperature float Fields _client protected readonly OpenAIClient _client Field Value OpenAIClient _systemPrompt protected string _systemPrompt Field Value string Properties _options protected ChatCompletionsOptions _options { get; } Property Value ChatCompletionsOptions Methods Run(string, int, int, int, Action<string>?) protected Task<string> Run(string query, int timeoutMillisecodns, int retryDelayMilliseconds, int maxRetries, Action<string>? callback = null) Parameters query string timeoutMillisecodns int retryDelayMilliseconds int maxRetries int callback Action<string> Returns Task<string>"
  },
  "api/WebApp.AI.html": {
    "href": "api/WebApp.AI.html",
    "title": "Namespace WebApp.AI | Gong Cha",
    "keywords": "Namespace WebApp.AI Classes Chatbot Core"
  },
  "api/WebApp.APIs.AzureMaps.Weather.html": {
    "href": "api/WebApp.APIs.AzureMaps.Weather.html",
    "title": "Class Weather | Gong Cha",
    "keywords": "Class Weather Namespace WebApp.APIs.AzureMaps Assembly WebApp.dll public class Weather Inheritance object Weather Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Weather() public Weather() Methods GetCurrentCondition() public Task<CurrentCondition?> GetCurrentCondition() Returns Task<CurrentCondition> GetWeatherIconName(int?) public string? GetWeatherIconName(int? iconCode) Parameters iconCode int? Returns string"
  },
  "api/WebApp.APIs.AzureMaps.html": {
    "href": "api/WebApp.APIs.AzureMaps.html",
    "title": "Namespace WebApp.APIs.AzureMaps | Gong Cha",
    "keywords": "Namespace WebApp.APIs.AzureMaps Classes Weather"
  },
  "api/WebApp.APIs.GoogleTranslate.GoogleTranslate.html": {
    "href": "api/WebApp.APIs.GoogleTranslate.GoogleTranslate.html",
    "title": "Class GoogleTranslate | Gong Cha",
    "keywords": "Class GoogleTranslate Namespace WebApp.APIs.GoogleTranslate Assembly WebApp.dll public class GoogleTranslate Inheritance object GoogleTranslate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GoogleTranslate() public GoogleTranslate() Fields CurrentLanguage public string CurrentLanguage Field Value string Methods GetPreferredLanguage() public string GetPreferredLanguage() Returns string GetSupportedLanguages() public KeyValuePair<string, string>[]? GetSupportedLanguages() Returns KeyValuePair<string, string>[] TranslateText(string) public Task<string> TranslateText(string text) Parameters text string Returns Task<string>"
  },
  "api/WebApp.APIs.GoogleTranslate.html": {
    "href": "api/WebApp.APIs.GoogleTranslate.html",
    "title": "Namespace WebApp.APIs.GoogleTranslate | Gong Cha",
    "keywords": "Namespace WebApp.APIs.GoogleTranslate Classes GoogleTranslate"
  },
  "api/WebApp.Controllers.AIController.html": {
    "href": "api/WebApp.Controllers.AIController.html",
    "title": "Class AIController | Gong Cha",
    "keywords": "Class AIController Namespace WebApp.Controllers Assembly WebApp.dll [ApiController] public class AIController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller AIController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AIController(ILogger<AIController>) public AIController(ILogger<AIController> logger) Parameters logger ILogger<AIController> Methods ClearHistory() [HttpDelete] [Route(\"AI/ClearHistory\")] public IActionResult ClearHistory() Returns IActionResult GetHistory() [HttpGet] [Route(\"AI/GetHistory\")] public string GetHistory() Returns string GetHistorySplit() [HttpGet] [Route(\"AI/GetHistorySplit\")] public IActionResult GetHistorySplit() Returns IActionResult GetResponse(string) [HttpPost] [Route(\"AI/GetResponse/{input}\")] public Task<IActionResult> GetResponse(string input) Parameters input string Returns Task<IActionResult> SetHistory(string) [HttpPost] [Route(\"AI/SetHistory\")] public void SetHistory(string history) Parameters history string"
  },
  "api/WebApp.Controllers.AccountController.html": {
    "href": "api/WebApp.Controllers.AccountController.html",
    "title": "Class AccountController | Gong Cha",
    "keywords": "Class AccountController Namespace WebApp.Controllers Assembly WebApp.dll [AllowAnonymous] [ApiController] public class AccountController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller AccountController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountController(ILogger<AccountController>) public AccountController(ILogger<AccountController> logger) Parameters logger ILogger<AccountController> Methods AccessDenied() [HttpGet] [Route(\"Account/AccessDenied\")] public IActionResult AccessDenied() Returns IActionResult Error() [HttpGet] [Route(\"Account/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult GetEmail() [HttpGet] [Route(\"Account/GetEmail\")] public string GetEmail() Returns string GetName() [HttpGet] [Route(\"Account/GetName\")] public string GetName() Returns string GetRole() [HttpGet] [Route(\"Account/GetRole\")] public string GetRole() Returns string GetUserInfo() [HttpGet] [Route(\"Account/GetUserInfo\")] public IActionResult GetUserInfo() Returns IActionResult Index() [HttpGet] [Route(\"Account/\")] public IActionResult Index() Returns IActionResult Login(string, string) [HttpGet] [Route(\"Account/Login\")] public IActionResult Login(string provider = \"Google\", string returnUrl = \"/\") Parameters provider string returnUrl string Returns IActionResult LoginCallback(string) [HttpGet] [Route(\"Account/LoginCallback\")] public Task<IActionResult> LoginCallback(string returnUrl) Parameters returnUrl string Returns Task<IActionResult> Logout(string) [HttpGet] [Route(\"Account/Logout\")] public IActionResult Logout(string returnUrl) Parameters returnUrl string Returns IActionResult ResetPreferencesToDefault() [HttpDelete] [Route(\"Account/ResetPreferencesToDefault\")] public IActionResult ResetPreferencesToDefault() Returns IActionResult SaveUserPreferences(string?, string?, string?, string?) [HttpPost] [Route(\"Account/SaveUserPreferences\")] public IActionResult SaveUserPreferences(string? accCursor = null, string? accTextSize = null, string? accContrast = null, string? accLanguage = null) Parameters accCursor string accTextSize string accContrast string accLanguage string Returns IActionResult"
  },
  "api/WebApp.Controllers.CartController.html": {
    "href": "api/WebApp.Controllers.CartController.html",
    "title": "Class CartController | Gong Cha",
    "keywords": "Class CartController Namespace WebApp.Controllers Assembly WebApp.dll [ApiController] public class CartController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller CartController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CartController(ILogger<CartController>, CartService) public CartController(ILogger<CartController> logger, CartService cartService) Parameters logger ILogger<CartController> cartService CartService Methods AddItem(AddItemModel) [HttpPost] [Route(\"/Cart/AddItem\")] public IActionResult AddItem(AddItemModel model) Parameters model AddItemModel Returns IActionResult Checkout(CheckoutModel) [HttpPost] [Route(\"/Cart/Checkout\")] public IActionResult Checkout(CheckoutModel model) Parameters model CheckoutModel Returns IActionResult EditCount(EditCountModel) [HttpPost] [Route(\"/Cart/EditCount\")] public IActionResult EditCount(EditCountModel model) Parameters model EditCountModel Returns IActionResult Error() [HttpGet] [Route(\"/Cart/GetCartSize\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult GetCartFromSession() [HttpGet] [Route(\"/Cart/GetCartFromSession\")] public Cart GetCartFromSession() Returns Cart Index() [HttpGet] [Route(\"/Cart\")] public IActionResult Index() Returns IActionResult RemoveItem(int) [HttpPost] [Route(\"/Cart/RemoveItem\")] public IActionResult RemoveItem(int index) Parameters index int Returns IActionResult SetCartInSession(Cart) [HttpPost] [Route(\"/Cart/SetCartInSession\")] public void SetCartInSession(Cart cart) Parameters cart Cart"
  },
  "api/WebApp.Controllers.CashierController.html": {
    "href": "api/WebApp.Controllers.CashierController.html",
    "title": "Class CashierController | Gong Cha",
    "keywords": "Class CashierController Namespace WebApp.Controllers Assembly WebApp.dll [Authorize(Roles = \"Cashier, Manager\")] [ApiController] public class CashierController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller CashierController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CashierController(ILogger<CashierController>, IMemoryCache, CartService) public CashierController(ILogger<CashierController> logger, IMemoryCache cache, CartService cartService) Parameters logger ILogger<CashierController> cache IMemoryCache cartService CartService Methods AddFavorite(int) [HttpPost] [Route(\"Cashier/AddFavorite\")] public IActionResult AddFavorite(int productID) Parameters productID int Returns IActionResult Error() [HttpGet] [Route(\"Cashier/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult Index() [HttpGet] [Route(\"Cashier/\")] public IActionResult Index() Returns IActionResult LoadBestSellers() [HttpGet] [Route(\"Cashier/LoadBestSellers\")] public IActionResult LoadBestSellers() Returns IActionResult LoadCategories() [HttpGet] [Route(\"Cashier/LoadCategories\")] public IActionResult LoadCategories() Returns IActionResult LoadCustomizations(string) [HttpGet] [Route(\"Cashier/LoadCustomizations\")] public IActionResult LoadCustomizations(string arg) Parameters arg string Returns IActionResult LoadFavorites() [HttpGet] [Route(\"Cashier/LoadFavorites\")] public IActionResult LoadFavorites() Returns IActionResult LoadProductsBySeries(string) [HttpGet] [Route(\"Cashier/LoadProductsBySeries\")] public IActionResult LoadProductsBySeries(string arg) Parameters arg string Returns IActionResult RemoveFavorite(int) [HttpDelete] [Route(\"Cashier/RemoveFavorite\")] public IActionResult RemoveFavorite(int productID) Parameters productID int Returns IActionResult"
  },
  "api/WebApp.Controllers.CustomerController.html": {
    "href": "api/WebApp.Controllers.CustomerController.html",
    "title": "Class CustomerController | Gong Cha",
    "keywords": "Class CustomerController Namespace WebApp.Controllers Assembly WebApp.dll [ApiController] public class CustomerController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller CustomerController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomerController(CartService, IMemoryCache) public CustomerController(CartService cartService, IMemoryCache cache) Parameters cartService CartService cache IMemoryCache Methods AddFavorite(int) [HttpPost] [Route(\"Customer/AddFavorite/{productID}\")] public IActionResult AddFavorite(int productID) Parameters productID int Returns IActionResult Index() [HttpGet] [Route(\"Customer/\")] public IActionResult Index() Returns IActionResult LoadBestSellers() [HttpGet] [Route(\"Customer/LoadBestSellers\")] public IActionResult LoadBestSellers() Returns IActionResult LoadCategories() [HttpGet] [Route(\"Customer/LoadCategories\")] public IActionResult LoadCategories() Returns IActionResult LoadCustomizations(string) [HttpGet] [Route(\"Customer/LoadCustomizations\")] public IActionResult LoadCustomizations(string arg) Parameters arg string Returns IActionResult LoadFavorites() [HttpGet] [Route(\"Customer/LoadFavorites\")] public IActionResult LoadFavorites() Returns IActionResult LoadProductsBySeries(string) [HttpGet] [Route(\"Customer/LoadProductsBySeries\")] public IActionResult LoadProductsBySeries(string arg) Parameters arg string Returns IActionResult RemoveFavorite(int) [HttpDelete] [Route(\"Customer/RemoveFavorite/{productID}\")] public IActionResult RemoveFavorite(int productID) Parameters productID int Returns IActionResult"
  },
  "api/WebApp.Controllers.HomeController.html": {
    "href": "api/WebApp.Controllers.HomeController.html",
    "title": "Class HomeController | Gong Cha",
    "keywords": "Class HomeController Namespace WebApp.Controllers Assembly WebApp.dll [ApiController] public class HomeController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller HomeController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HomeController(ILogger<HomeController>) public HomeController(ILogger<HomeController> logger) Parameters logger ILogger<HomeController> Methods Error() [HttpGet] [Route(\"/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult GetPreferredLanguage() [HttpGet] [Route(\"/GetPreferredLanguage\")] public string GetPreferredLanguage() Returns string Index(bool) [HttpGet] [Route(\"/\")] public IActionResult Index(bool autoRedirect = true) Parameters autoRedirect bool Returns IActionResult"
  },
  "api/WebApp.Controllers.ManagerController.html": {
    "href": "api/WebApp.Controllers.ManagerController.html",
    "title": "Class ManagerController | Gong Cha",
    "keywords": "Class ManagerController Namespace WebApp.Controllers Assembly WebApp.dll [Authorize(Roles = \"Manager\")] [ApiController] public class ManagerController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller ManagerController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ManagerController(ILogger<ManagerController>, CartService, IMemoryCache) public ManagerController(ILogger<ManagerController> logger, CartService cartService, IMemoryCache cache) Parameters logger ILogger<ManagerController> cartService CartService cache IMemoryCache Methods AddInventory() [HttpPost] [Route(\"Manager/AddInventory\")] public IActionResult AddInventory() Returns IActionResult AddProduct() [HttpPost] [Route(\"Manager/AddProduct\")] public IActionResult AddProduct() Returns IActionResult ClearCache() [HttpDelete] [Route(\"Manager/ClearCache\")] public IActionResult ClearCache() Returns IActionResult DeleteInventory(int) [HttpDelete] [Route(\"Manager/DeleteInventory/{inv}\")] public IActionResult DeleteInventory(int inv) Parameters inv int Returns IActionResult DeleteProduct(int) [HttpDelete] [Route(\"Manager/DeleteProduct/{prod}\")] public IActionResult DeleteProduct(int prod) Parameters prod int Returns IActionResult Error() [HttpGet] [Route(\"Manager/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult Index() [HttpGet] [Route(\"Manager/\")] public IActionResult Index() Returns IActionResult SaveInventory(Dictionary<string, string>) [HttpPost] [Route(\"Manager/SaveInventory\")] public IActionResult SaveInventory(Dictionary<string, string> payload) Parameters payload Dictionary<string, string> Returns IActionResult SaveProducts(List<Product>) [HttpPost] [Route(\"Manager/SaveProducts\")] public IActionResult SaveProducts(List<Product> data) Parameters data List<Product> Returns IActionResult ShowExcessReport(Dictionary<string, string>) [HttpPost] [Route(\"Manager/ShowExcessReport\")] public IActionResult ShowExcessReport(Dictionary<string, string> payload) Parameters payload Dictionary<string, string> Returns IActionResult ShowInventory() [HttpGet] [Route(\"Manager/ShowInventory\")] public IActionResult ShowInventory() Returns IActionResult ShowManager() [HttpGet] [Route(\"Manager/ShowManager\")] public IActionResult ShowManager() Returns IActionResult ShowPopularityAnalysis(Dictionary<string, string>) [HttpPost] [Route(\"Manager/ShowPopularityAnalysis\")] public IActionResult ShowPopularityAnalysis(Dictionary<string, string> payload) Parameters payload Dictionary<string, string> Returns IActionResult ShowProducts() [HttpGet] [Route(\"Manager/ShowProducts\")] public IActionResult ShowProducts() Returns IActionResult ShowRestockReport(Dictionary<string, string>) [HttpPost] [Route(\"Manager/ShowRestockReport\")] public IActionResult ShowRestockReport(Dictionary<string, string> payload) Parameters payload Dictionary<string, string> Returns IActionResult ShowSalesReport(Dictionary<string, string>) [HttpPost] [Route(\"Manager/ShowSalesReport\")] public IActionResult ShowSalesReport(Dictionary<string, string> payload) Parameters payload Dictionary<string, string> Returns IActionResult ShowSalesTogether(Dictionary<string, string>) [HttpPost] [Route(\"Manager/ShowSalesTogether\")] public IActionResult ShowSalesTogether(Dictionary<string, string> payload) Parameters payload Dictionary<string, string> Returns IActionResult"
  },
  "api/WebApp.Controllers.MenuBoardController.html": {
    "href": "api/WebApp.Controllers.MenuBoardController.html",
    "title": "Class MenuBoardController | Gong Cha",
    "keywords": "Class MenuBoardController Namespace WebApp.Controllers Assembly WebApp.dll [ApiController] public class MenuBoardController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller MenuBoardController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MenuBoardController(ILogger<MenuBoardController>, CartService) public MenuBoardController(ILogger<MenuBoardController> logger, CartService cartService) Parameters logger ILogger<MenuBoardController> cartService CartService Methods Error() [HttpGet] [Route(\"MenuBoard/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult GetProductsByCategory(string) [HttpGet] [Route(\"MenuBoard/GetProductsByCategory\")] public IActionResult GetProductsByCategory(string category) Parameters category string Returns IActionResult Index(string?) [HttpGet] [Route(\"MenuBoard/\")] public IActionResult Index(string? search = null) Parameters search string Returns IActionResult ProductDetail(int) [HttpGet] [Route(\"MenuBoard/ProductDetail\")] public IActionResult ProductDetail(int id) Parameters id int Returns IActionResult getProducts() [HttpGet] [Route(\"MenuBoard/getProducts\")] public IActionResult getProducts() Returns IActionResult"
  },
  "api/WebApp.Controllers.StoryController.html": {
    "href": "api/WebApp.Controllers.StoryController.html",
    "title": "Class StoryController | Gong Cha",
    "keywords": "Class StoryController Namespace WebApp.Controllers Assembly WebApp.dll [ApiController] public class StoryController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller StoryController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StoryController(ILogger<StoryController>) public StoryController(ILogger<StoryController> logger) Parameters logger ILogger<StoryController> Methods Error() [HttpGet] [Route(\"Story/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult Index() [HttpGet] [Route(\"Story/\")] public IActionResult Index() Returns IActionResult"
  },
  "api/WebApp.Controllers.html": {
    "href": "api/WebApp.Controllers.html",
    "title": "Namespace WebApp.Controllers | Gong Cha",
    "keywords": "Namespace WebApp.Controllers Classes AIController AccountController CartController CashierController CustomerController HomeController ManagerController MenuBoardController StoryController"
  },
  "api/WebApp.Data.CommandHandler.html": {
    "href": "api/WebApp.Data.CommandHandler.html",
    "title": "Class CommandHandler | Gong Cha",
    "keywords": "Class CommandHandler Namespace WebApp.Data Assembly WebApp.dll public class CommandHandler Inheritance object CommandHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandler(NpgsqlConnection) public CommandHandler(NpgsqlConnection connection) Parameters connection NpgsqlConnection Methods ExecuteNonQuery(string) public void ExecuteNonQuery(string statement) Parameters statement string ExecuteReader(string) public NpgsqlDataReader? ExecuteReader(string query) Parameters query string Returns NpgsqlDataReader"
  },
  "api/WebApp.Data.DaoTypeContainer.html": {
    "href": "api/WebApp.Data.DaoTypeContainer.html",
    "title": "Class DaoTypeContainer | Gong Cha",
    "keywords": "Class DaoTypeContainer Namespace WebApp.Data Assembly WebApp.dll public class DaoTypeContainer Inheritance object DaoTypeContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DaoTypeContainer(Dictionary<Type, object>) public DaoTypeContainer(Dictionary<Type, object> daoTypeMap) Parameters daoTypeMap Dictionary<Type, object> Methods GetDao<T>() public IDao<T> GetDao<T>() where T : class Returns IDao<T> Type Parameters T GetEmployeeDao() public EmployeeDao GetEmployeeDao() Returns EmployeeDao GetIngredientDao() public IngredientDao GetIngredientDao() Returns IngredientDao GetInventoryDao() public InventoryDao GetInventoryDao() Returns InventoryDao GetOrderDao() public OrderDao GetOrderDao() Returns OrderDao GetProductDao() public ProductDao GetProductDao() Returns ProductDao GetProductIngredientsDao() public ProductIngredientsDao GetProductIngredientsDao() Returns ProductIngredientsDao GetSeriesInfoDao() public SeriesInfoDao GetSeriesInfoDao() Returns SeriesInfoDao GetUserDao() public UserDao GetUserDao() Returns UserDao"
  },
  "api/WebApp.Data.EmployeeDao.html": {
    "href": "api/WebApp.Data.EmployeeDao.html",
    "title": "Class EmployeeDao | Gong Cha",
    "keywords": "Class EmployeeDao Namespace WebApp.Data Assembly WebApp.dll public class EmployeeDao : IDao<Employee> Inheritance object EmployeeDao Implements IDao<Employee> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EmployeeDao(CommandHandler) public EmployeeDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler Methods Add(Employee) public void Add(Employee t) Parameters t Employee Delete(Employee) public void Delete(Employee t) Parameters t Employee Get(int) public Employee Get(int id) Parameters id int Returns Employee GetAll() public IEnumerable<Employee> GetAll() Returns IEnumerable<Employee> Update(Employee, Employee) public void Update(Employee t, Employee newT) Parameters t Employee newT Employee"
  },
  "api/WebApp.Data.EntityServices.html": {
    "href": "api/WebApp.Data.EntityServices.html",
    "title": "Class EntityServices | Gong Cha",
    "keywords": "Class EntityServices Namespace WebApp.Data Assembly WebApp.dll public class EntityServices Inheritance object EntityServices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityServices(DaoTypeContainer) public EntityServices(DaoTypeContainer daoTypeContainer) Parameters daoTypeContainer DaoTypeContainer Methods Add<T>(T) public void Add<T>(T t) where T : class Parameters t T Type Parameters T Delete<T>(T) public void Delete<T>(T t) where T : class Parameters t T Type Parameters T GetAll<T>() public IEnumerable<T> GetAll<T>() where T : class Returns IEnumerable<T> Type Parameters T Get<T>(int) public T Get<T>(int id) where T : class Parameters id int Returns T Type Parameters T Update<T>(T, T) public void Update<T>(T t, T newT) where T : class Parameters t T newT T Type Parameters T"
  },
  "api/WebApp.Data.IDao-1.html": {
    "href": "api/WebApp.Data.IDao-1.html",
    "title": "Interface IDao<T> | Gong Cha",
    "keywords": "Interface IDao<T> Namespace WebApp.Data Assembly WebApp.dll public interface IDao<T> Type Parameters T Methods Add(T) void Add(T t) Parameters t T Delete(T) void Delete(T t) Parameters t T Get(int) T Get(int id) Parameters id int Returns T GetAll() IEnumerable<T> GetAll() Returns IEnumerable<T> Update(T, T) void Update(T t, T newT) Parameters t T newT T"
  },
  "api/WebApp.Data.IngredientDao.html": {
    "href": "api/WebApp.Data.IngredientDao.html",
    "title": "Class IngredientDao | Gong Cha",
    "keywords": "Class IngredientDao Namespace WebApp.Data Assembly WebApp.dll public class IngredientDao : IDao<Ingredient> Inheritance object IngredientDao Implements IDao<Ingredient> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IngredientDao(CommandHandler) public IngredientDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler Methods Add(Ingredient) public void Add(Ingredient t) Parameters t Ingredient Delete(Ingredient) public void Delete(Ingredient t) Parameters t Ingredient Get(int) public Ingredient Get(int id) Parameters id int Returns Ingredient GetAll() public IEnumerable<Ingredient> GetAll() Returns IEnumerable<Ingredient> GetRecentIngredient() public Ingredient GetRecentIngredient() Returns Ingredient Update(Ingredient, Ingredient) public void Update(Ingredient t, Ingredient newT) Parameters t Ingredient newT Ingredient"
  },
  "api/WebApp.Data.InventoryDao.html": {
    "href": "api/WebApp.Data.InventoryDao.html",
    "title": "Class InventoryDao | Gong Cha",
    "keywords": "Class InventoryDao Namespace WebApp.Data Assembly WebApp.dll public class InventoryDao : IDao<Inventory> Inheritance object InventoryDao Implements IDao<Inventory> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InventoryDao(CommandHandler) public InventoryDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler Methods Add(Inventory) public void Add(Inventory t) Parameters t Inventory Delete(Inventory) public void Delete(Inventory t) Parameters t Inventory Get(int) public Inventory Get(int id) Parameters id int Returns Inventory GetAll() public IEnumerable<Inventory> GetAll() Returns IEnumerable<Inventory> GetRecentInventory() public Inventory GetRecentInventory() Returns Inventory Update(Inventory, Inventory) public void Update(Inventory t, Inventory newT) Parameters t Inventory newT Inventory"
  },
  "api/WebApp.Data.OrderDao.html": {
    "href": "api/WebApp.Data.OrderDao.html",
    "title": "Class OrderDao | Gong Cha",
    "keywords": "Class OrderDao Namespace WebApp.Data Assembly WebApp.dll public class OrderDao : IDao<Order> Inheritance object OrderDao Implements IDao<Order> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OrderDao(CommandHandler) public OrderDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler Methods Add(Order) public void Add(Order t) Parameters t Order Delete(Order) public void Delete(Order t) Parameters t Order Get(int) public Order Get(int id) Parameters id int Returns Order GetAll() public IEnumerable<Order> GetAll() Returns IEnumerable<Order> GetOrdersBetween(DateTime, DateTime) public List<Order> GetOrdersBetween(DateTime starttime, DateTime endtime) Parameters starttime DateTime endtime DateTime Returns List<Order> Update(Order, Order) public void Update(Order t, Order newT) Parameters t Order newT Order"
  },
  "api/WebApp.Data.ProductDao.html": {
    "href": "api/WebApp.Data.ProductDao.html",
    "title": "Class ProductDao | Gong Cha",
    "keywords": "Class ProductDao Namespace WebApp.Data Assembly WebApp.dll public class ProductDao : IDao<Product> Inheritance object ProductDao Implements IDao<Product> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductDao(CommandHandler) public ProductDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler Methods Add(Product) public void Add(Product t) Parameters t Product Delete(Product) public void Delete(Product t) Parameters t Product Get(int) public Product Get(int id) Parameters id int Returns Product GetAll() public IEnumerable<Product> GetAll() Returns IEnumerable<Product> GetBestSellingProducts(int) public IEnumerable<Product> GetBestSellingProducts(int limit = 5) Parameters limit int Returns IEnumerable<Product> GetProductsBySeries(string) public IEnumerable<Product> GetProductsBySeries(string series) Parameters series string Returns IEnumerable<Product> GetRecentProduct() public Product GetRecentProduct() Returns Product GetUniqueSeries(bool, bool, bool) public IEnumerable<string> GetUniqueSeries(bool includeDrinks = true, bool includeHidden = false, bool includeIsOption = false) Parameters includeDrinks bool includeHidden bool includeIsOption bool Returns IEnumerable<string> Update(Product, Product) public void Update(Product t, Product newT) Parameters t Product newT Product"
  },
  "api/WebApp.Data.ProductIngredientsDao.html": {
    "href": "api/WebApp.Data.ProductIngredientsDao.html",
    "title": "Class ProductIngredientsDao | Gong Cha",
    "keywords": "Class ProductIngredientsDao Namespace WebApp.Data Assembly WebApp.dll public class ProductIngredientsDao : IDao<ProductIngredients> Inheritance object ProductIngredientsDao Implements IDao<ProductIngredients> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductIngredientsDao(CommandHandler) public ProductIngredientsDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler Methods Add(ProductIngredients) public void Add(ProductIngredients t) Parameters t ProductIngredients Delete(ProductIngredients) public void Delete(ProductIngredients t) Parameters t ProductIngredients Get(int) public ProductIngredients Get(int id) Parameters id int Returns ProductIngredients GetAll() public IEnumerable<ProductIngredients> GetAll() Returns IEnumerable<ProductIngredients> Update(ProductIngredients, ProductIngredients) public void Update(ProductIngredients t, ProductIngredients newT) Parameters t ProductIngredients newT ProductIngredients"
  },
  "api/WebApp.Data.SeriesInfoDao.html": {
    "href": "api/WebApp.Data.SeriesInfoDao.html",
    "title": "Class SeriesInfoDao | Gong Cha",
    "keywords": "Class SeriesInfoDao Namespace WebApp.Data Assembly WebApp.dll public class SeriesInfoDao : IDao<SeriesInfo> Inheritance object SeriesInfoDao Implements IDao<SeriesInfo> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SeriesInfoDao(CommandHandler) public SeriesInfoDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler Methods Add(SeriesInfo) public void Add(SeriesInfo t) Parameters t SeriesInfo Delete(SeriesInfo) public void Delete(SeriesInfo t) Parameters t SeriesInfo Get(int) public SeriesInfo Get(int id) Parameters id int Returns SeriesInfo Get(string) public SeriesInfo Get(string name) Parameters name string Returns SeriesInfo GetAll() public IEnumerable<SeriesInfo> GetAll() Returns IEnumerable<SeriesInfo> Update(SeriesInfo, SeriesInfo) public void Update(SeriesInfo t, SeriesInfo newT) Parameters t SeriesInfo newT SeriesInfo"
  },
  "api/WebApp.Data.UnitOfWork.html": {
    "href": "api/WebApp.Data.UnitOfWork.html",
    "title": "Class UnitOfWork | Gong Cha",
    "keywords": "Class UnitOfWork Namespace WebApp.Data Assembly WebApp.dll public class UnitOfWork Inheritance object UnitOfWork Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UnitOfWork(string) public UnitOfWork(string databaseName = \"\") Parameters databaseName string Methods Add<T>(T) public void Add<T>(T t) where T : class Parameters t T Type Parameters T CloseConnection() public void CloseConnection() Delete<T>(T) public void Delete<T>(T t) where T : class Parameters t T Type Parameters T GetAll<T>() public IEnumerable<T> GetAll<T>() where T : class Returns IEnumerable<T> Type Parameters T GetBestSellingProducts(int) public IEnumerable<Product> GetBestSellingProducts(int limit) Parameters limit int Returns IEnumerable<Product> GetOrdersBetween(DateTime, DateTime) public List<Order> GetOrdersBetween(DateTime starttime, DateTime endtime) Parameters starttime DateTime endtime DateTime Returns List<Order> GetProductsBySeries(string) public IEnumerable<Product> GetProductsBySeries(string series) Parameters series string Returns IEnumerable<Product> GetRecentIngredient() public Ingredient GetRecentIngredient() Returns Ingredient GetRecentInventory() public Inventory GetRecentInventory() Returns Inventory GetRecentProduct() public Product GetRecentProduct() Returns Product GetSeriesInfo(string) public SeriesInfo GetSeriesInfo(string name) Parameters name string Returns SeriesInfo GetUniqueSeries(bool, bool, bool) public IEnumerable<string> GetUniqueSeries(bool includeDrinks = true, bool includeHidden = false, bool includeIsOption = false) Parameters includeDrinks bool includeHidden bool includeIsOption bool Returns IEnumerable<string> GetUser(string) public User? GetUser(string email) Parameters email string Returns User Get<T>(int) public T Get<T>(int id) where T : class Parameters id int Returns T Type Parameters T Update<T>(T, T) public void Update<T>(T t, T newT) where T : class Parameters t T newT T Type Parameters T"
  },
  "api/WebApp.Data.UserDao.html": {
    "href": "api/WebApp.Data.UserDao.html",
    "title": "Class UserDao | Gong Cha",
    "keywords": "Class UserDao Namespace WebApp.Data Assembly WebApp.dll public class UserDao : IDao<User> Inheritance object UserDao Implements IDao<User> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserDao(CommandHandler) public UserDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler Methods Add(User) public void Add(User t) Parameters t User Delete(User) public void Delete(User t) Parameters t User Get(int) public User Get(int id) Parameters id int Returns User Get(string) public User? Get(string email) Parameters email string Returns User GetAll() public IEnumerable<User> GetAll() Returns IEnumerable<User> Update(User, User) public void Update(User t, User newT) Parameters t User newT User"
  },
  "api/WebApp.Data.html": {
    "href": "api/WebApp.Data.html",
    "title": "Namespace WebApp.Data | Gong Cha",
    "keywords": "Namespace WebApp.Data Classes CommandHandler DaoTypeContainer EmployeeDao EntityServices IngredientDao InventoryDao OrderDao ProductDao ProductIngredientsDao SeriesInfoDao UnitOfWork UserDao Interfaces IDao<T>"
  },
  "api/WebApp.Models.AzureMaps.Weather.CurrentCondition.html": {
    "href": "api/WebApp.Models.AzureMaps.Weather.CurrentCondition.html",
    "title": "Class CurrentCondition | Gong Cha",
    "keywords": "Class CurrentCondition Namespace WebApp.Models.AzureMaps.Weather Assembly WebApp.dll public class CurrentCondition Inheritance object CurrentCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CurrentCondition(double?, int?) public CurrentCondition(double? temperature, int? iconCode) Parameters temperature double? iconCode int? Properties IconCode public int? IconCode { get; set; } Property Value int? Temperature public double? Temperature { get; set; } Property Value double?"
  },
  "api/WebApp.Models.AzureMaps.Weather.html": {
    "href": "api/WebApp.Models.AzureMaps.Weather.html",
    "title": "Namespace WebApp.Models.AzureMaps.Weather | Gong Cha",
    "keywords": "Namespace WebApp.Models.AzureMaps.Weather Classes CurrentCondition"
  },
  "api/WebApp.Models.Cart.Cart.html": {
    "href": "api/WebApp.Models.Cart.Cart.html",
    "title": "Class Cart | Gong Cha",
    "keywords": "Class Cart Namespace WebApp.Models.Cart Assembly WebApp.dll public class Cart Inheritance object Cart Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Cart() public Cart() Properties Items public List<Item> Items { get; set; } Property Value List<Item> Total public double Total { get; } Property Value double Methods AddItem(Item) public void AddItem(Item item) Parameters item Item Clear() public void Clear() RemoveItem(int) public void RemoveItem(int index) Parameters index int RemoveItem(Item) public void RemoveItem(Item item) Parameters item Item TotalCost() public double TotalCost() Returns double"
  },
  "api/WebApp.Models.Cart.CartService.html": {
    "href": "api/WebApp.Models.Cart.CartService.html",
    "title": "Class CartService | Gong Cha",
    "keywords": "Class CartService Namespace WebApp.Models.Cart Assembly WebApp.dll public class CartService Inheritance object CartService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CartService(IHttpContextAccessor) public CartService(IHttpContextAccessor httpContextAccessor) Parameters httpContextAccessor IHttpContextAccessor Methods GetCartFromSession() public Cart GetCartFromSession() Returns Cart SetCartInSession(Cart) public void SetCartInSession(Cart cart) Parameters cart Cart"
  },
  "api/WebApp.Models.Cart.Item.html": {
    "href": "api/WebApp.Models.Cart.Item.html",
    "title": "Class Item | Gong Cha",
    "keywords": "Class Item Namespace WebApp.Models.Cart Assembly WebApp.dll public class Item Inheritance object Item Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Item(Product, List<Product>, int) public Item(Product product, List<Product> options, int quantity) Parameters product Product options List<Product> quantity int Properties Options public List<Product> Options { get; set; } Property Value List<Product> Product public Product Product { get; set; } Property Value Product Quantity public int Quantity { get; set; } Property Value int Methods Price() public double Price() Returns double"
  },
  "api/WebApp.Models.Cart.html": {
    "href": "api/WebApp.Models.Cart.html",
    "title": "Namespace WebApp.Models.Cart | Gong Cha",
    "keywords": "Namespace WebApp.Models.Cart Classes Cart CartService Item"
  },
  "api/WebApp.Models.ErrorViewModel.html": {
    "href": "api/WebApp.Models.ErrorViewModel.html",
    "title": "Class ErrorViewModel | Gong Cha",
    "keywords": "Class ErrorViewModel Namespace WebApp.Models Assembly WebApp.dll public class ErrorViewModel Inheritance object ErrorViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RequestId public string? RequestId { get; set; } Property Value string ShowRequestId public bool ShowRequestId { get; } Property Value bool"
  },
  "api/WebApp.Models.JsonModels.AddItemModel.html": {
    "href": "api/WebApp.Models.JsonModels.AddItemModel.html",
    "title": "Class AddItemModel | Gong Cha",
    "keywords": "Class AddItemModel Namespace WebApp.Models.JsonModels Assembly WebApp.dll public class AddItemModel Inheritance object AddItemModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CustomizationIds public List<int> CustomizationIds { get; set; } Property Value List<int> ProductId public int ProductId { get; set; } Property Value int Quantity public int Quantity { get; set; } Property Value int"
  },
  "api/WebApp.Models.JsonModels.CheckoutModel.html": {
    "href": "api/WebApp.Models.JsonModels.CheckoutModel.html",
    "title": "Class CheckoutModel | Gong Cha",
    "keywords": "Class CheckoutModel Namespace WebApp.Models.JsonModels Assembly WebApp.dll public class CheckoutModel Inheritance object CheckoutModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email public string Email { get; set; } Property Value string Name public string Name { get; set; } Property Value string Role public string Role { get; set; } Property Value string"
  },
  "api/WebApp.Models.JsonModels.EditCountModel.html": {
    "href": "api/WebApp.Models.JsonModels.EditCountModel.html",
    "title": "Class EditCountModel | Gong Cha",
    "keywords": "Class EditCountModel Namespace WebApp.Models.JsonModels Assembly WebApp.dll public class EditCountModel Inheritance object EditCountModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Index public int Index { get; set; } Property Value int IsIncrement public bool IsIncrement { get; set; } Property Value bool"
  },
  "api/WebApp.Models.JsonModels.html": {
    "href": "api/WebApp.Models.JsonModels.html",
    "title": "Namespace WebApp.Models.JsonModels | Gong Cha",
    "keywords": "Namespace WebApp.Models.JsonModels Classes AddItemModel CheckoutModel EditCountModel"
  },
  "api/WebApp.Models.UnitOfWork.Employee.html": {
    "href": "api/WebApp.Models.UnitOfWork.Employee.html",
    "title": "Class Employee | Gong Cha",
    "keywords": "Class Employee Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the Employee table. public class Employee Inheritance object Employee Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Employee(int, string, string, bool, string) Constructor for the Employee class. public Employee(int id, string name, string password, bool isManager, string email) Parameters id int name string password string isManager bool email string Properties Email public string Email { get; set; } Property Value string Id public int Id { get; set; } Property Value int IsManager public bool IsManager { get; set; } Property Value bool Name public string Name { get; set; } Property Value string Password public string Password { get; set; } Property Value string"
  },
  "api/WebApp.Models.UnitOfWork.Ingredient.html": {
    "href": "api/WebApp.Models.UnitOfWork.Ingredient.html",
    "title": "Class Ingredient | Gong Cha",
    "keywords": "Class Ingredient Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the Ingredient table. public class Ingredient Inheritance object Ingredient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Ingredient(int, string) Constructor for the Ingredient class. public Ingredient(int id, string name) Parameters id int name string Properties Id public int Id { get; set; } Property Value int Name public string Name { get; set; } Property Value string"
  },
  "api/WebApp.Models.UnitOfWork.Inventory.html": {
    "href": "api/WebApp.Models.UnitOfWork.Inventory.html",
    "title": "Class Inventory | Gong Cha",
    "keywords": "Class Inventory Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the Inventory table. public class Inventory Inheritance object Inventory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Inventory(int, int, int, int) Constructor for the Inventory class. public Inventory(int id, int ingredientId, int quantity, int fillLevel) Parameters id int ingredientId int quantity int fillLevel int Properties FillLevel public int FillLevel { get; set; } Property Value int Id public int Id { get; set; } Property Value int IngredientId public int IngredientId { get; set; } Property Value int Quantity public int Quantity { get; set; } Property Value int"
  },
  "api/WebApp.Models.UnitOfWork.Order.html": {
    "href": "api/WebApp.Models.UnitOfWork.Order.html",
    "title": "Class Order | Gong Cha",
    "keywords": "Class Order Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the Order table. public class Order Inheritance object Order Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Order(int, int, string, DateTime, double, List<int>) Constructor for the Order class. public Order(int id, int employeeId, string customerName, DateTime orderDate, double totalPrice, List<int> itemIds) Parameters id int employeeId int customerName string orderDate DateTime totalPrice double itemIds List<int> Properties CustomerName public string CustomerName { get; set; } Property Value string EmployeeId public int EmployeeId { get; set; } Property Value int Id public int Id { get; set; } Property Value int ItemIds public List<int> ItemIds { get; set; } Property Value List<int> OrderDate public DateTime OrderDate { get; set; } Property Value DateTime TotalPrice public double TotalPrice { get; set; } Property Value double"
  },
  "api/WebApp.Models.UnitOfWork.Product.html": {
    "href": "api/WebApp.Models.UnitOfWork.Product.html",
    "title": "Class Product | Gong Cha",
    "keywords": "Class Product Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the Product table. public class Product Inheritance object Product Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Product(int, string, double, string, string, bool, bool, bool) Constructor for the Product class. public Product(int id, string name, double price, string series, string imgUrl, bool hidden, bool isOption, bool isDrink) Parameters id int name string price double series string imgUrl string hidden bool isOption bool isDrink bool Properties Hidden public bool Hidden { get; set; } Property Value bool Id public int Id { get; set; } Property Value int ImgUrl public string ImgUrl { get; set; } Property Value string IsDrink public bool IsDrink { get; set; } Property Value bool IsOption public bool IsOption { get; set; } Property Value bool Name public string Name { get; set; } Property Value string Price public double Price { get; set; } Property Value double Series public string Series { get; set; } Property Value string"
  },
  "api/WebApp.Models.UnitOfWork.ProductIngredients.html": {
    "href": "api/WebApp.Models.UnitOfWork.ProductIngredients.html",
    "title": "Class ProductIngredients | Gong Cha",
    "keywords": "Class ProductIngredients Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the ProductIngredients table. public class ProductIngredients Inheritance object ProductIngredients Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductIngredients(int, List<int>) Constructor for the ProductIngredients class. public ProductIngredients(int productId, List<int> ingredientIds) Parameters productId int ingredientIds List<int> Properties IngredientIds public List<int> IngredientIds { get; set; } Property Value List<int> ProductId public int ProductId { get; set; } Property Value int"
  },
  "api/WebApp.Models.UnitOfWork.SeriesInfo.html": {
    "href": "api/WebApp.Models.UnitOfWork.SeriesInfo.html",
    "title": "Class SeriesInfo | Gong Cha",
    "keywords": "Class SeriesInfo Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the series_info table. public class SeriesInfo Inheritance object SeriesInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SeriesInfo(string, string, bool, bool, bool, bool) Constructor for the SeriesInfo class. public SeriesInfo(string name, string img_url, bool multi_selectable, bool is_product, bool is_customization, bool is_hidden) Parameters name string The name of the series. img_url string The URL of the image associated with the series. multi_selectable bool Whether or not the series is multi-selectable. is_product bool Whether or not the series is a product. is_customization bool Whether or not the series is a customization. is_hidden bool Whether or not the series is hidden. Properties ImgUrl public string ImgUrl { get; set; } Property Value string IsCustomization public bool IsCustomization { get; set; } Property Value bool IsHidden public bool IsHidden { get; set; } Property Value bool IsProduct public bool IsProduct { get; set; } Property Value bool MultiSelectable public bool MultiSelectable { get; set; } Property Value bool Name public string Name { get; set; } Property Value string"
  },
  "api/WebApp.Models.UnitOfWork.User.html": {
    "href": "api/WebApp.Models.UnitOfWork.User.html",
    "title": "Class User | Gong Cha",
    "keywords": "Class User Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors User(string, string, int[], string, string, string, string) public User(string name, string email, int[] favorites, string accCursor = \"false\", string accTextSize = \"false\", string accContrast = \"normal\", string accLanguage = \"\") Parameters name string email string favorites int[] accCursor string accTextSize string accContrast string accLanguage string Properties AccContrast public string AccContrast { get; set; } Property Value string AccCursor public string AccCursor { get; set; } Property Value string AccLanguage public string AccLanguage { get; set; } Property Value string AccTextSize public string AccTextSize { get; set; } Property Value string Email public string Email { get; set; } Property Value string Favorites public int[] Favorites { get; set; } Property Value int[] Name public string Name { get; set; } Property Value string"
  },
  "api/WebApp.Models.UnitOfWork.html": {
    "href": "api/WebApp.Models.UnitOfWork.html",
    "title": "Namespace WebApp.Models.UnitOfWork | Gong Cha",
    "keywords": "Namespace WebApp.Models.UnitOfWork Classes Employee This class is used to represent a row in the Employee table. Ingredient This class is used to represent a row in the Ingredient table. Inventory This class is used to represent a row in the Inventory table. Order This class is used to represent a row in the Order table. Product This class is used to represent a row in the Product table. ProductIngredients This class is used to represent a row in the ProductIngredients table. SeriesInfo This class is used to represent a row in the series_info table. User"
  },
  "api/WebApp.Models.ViewModels.CustomizationViewModel.html": {
    "href": "api/WebApp.Models.ViewModels.CustomizationViewModel.html",
    "title": "Class CustomizationViewModel | Gong Cha",
    "keywords": "Class CustomizationViewModel Namespace WebApp.Models.ViewModels Assembly WebApp.dll public class CustomizationViewModel Inheritance object CustomizationViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Products public List<Product>? Products { get; set; } Property Value List<Product> SelectedProduct public Product? SelectedProduct { get; set; } Property Value Product SeriesInformation public List<SeriesInfo>? SeriesInformation { get; set; } Property Value List<SeriesInfo>"
  },
  "api/WebApp.Models.ViewModels.EditViewModel.html": {
    "href": "api/WebApp.Models.ViewModels.EditViewModel.html",
    "title": "Class EditViewModel | Gong Cha",
    "keywords": "Class EditViewModel Namespace WebApp.Models.ViewModels Assembly WebApp.dll public class EditViewModel Inheritance object EditViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Cart public Cart? Cart { get; set; } Property Value Cart Index public int Index { get; set; } Property Value int Products public List<Product>? Products { get; set; } Property Value List<Product> SeriesInformation public List<SeriesInfo>? SeriesInformation { get; set; } Property Value List<SeriesInfo>"
  },
  "api/WebApp.Models.ViewModels.html": {
    "href": "api/WebApp.Models.ViewModels.html",
    "title": "Namespace WebApp.Models.ViewModels | Gong Cha",
    "keywords": "Namespace WebApp.Models.ViewModels Classes CustomizationViewModel EditViewModel"
  },
  "api/WebApp.Models.html": {
    "href": "api/WebApp.Models.html",
    "title": "Namespace WebApp.Models | Gong Cha",
    "keywords": "Namespace WebApp.Models Classes ErrorViewModel"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Gong Cha",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Gong Cha",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Gong Cha",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "wwwroot/lib/jquery-validation/LICENSE.html": {
    "href": "wwwroot/lib/jquery-validation/LICENSE.html",
    "title": "The MIT License (MIT) | Gong Cha",
    "keywords": "The MIT License (MIT) Copyright Jörn Zaefferer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}