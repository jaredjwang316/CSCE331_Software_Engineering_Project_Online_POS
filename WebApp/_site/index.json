{
  "api/WebApp.AI.Chatbot.html": {
    "href": "api/WebApp.AI.Chatbot.html",
    "title": "Class Chatbot | Gong Cha",
    "keywords": "Class Chatbot Namespace WebApp.AI Assembly WebApp.dll public class Chatbot : Core Inheritance object Core Chatbot Inherited Members Core._systemPrompt Core._client Core._options object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Chatbot(string?, int, float) public Chatbot(string? systemPrompt = null, int maxTokens = 400, float temperature = 0.9) Parameters systemPrompt string maxTokens int temperature float Methods AddHistory(string) public void AddHistory(string message) Parameters message string Run(string, int, int, int, Action<string>?) public Task<string> Run(string query, int timeoutMillisecodns = 10000, int retryDelayMilliseconds = 1000, int maxRetries = 3, Action<string>? callback = null) Parameters query string timeoutMillisecodns int retryDelayMilliseconds int maxRetries int callback Action<string> Returns Task<string>"
  },
  "api/WebApp.AI.Core.html": {
    "href": "api/WebApp.AI.Core.html",
    "title": "Class Core | Gong Cha",
    "keywords": "Class Core Namespace WebApp.AI Assembly WebApp.dll public class Core Inheritance object Core Derived Chatbot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Core(string, int, float) protected Core(string systemPrompt, int maxTokens, float temperature) Parameters systemPrompt string maxTokens int temperature float Fields _client protected readonly OpenAIClient _client Field Value OpenAIClient _systemPrompt protected string _systemPrompt Field Value string Properties _options protected ChatCompletionsOptions _options { get; } Property Value ChatCompletionsOptions Methods Run(string, int, int, int, Action<string>?) protected Task<string> Run(string query, int timeoutMillisecodns, int retryDelayMilliseconds, int maxRetries, Action<string>? callback = null) Parameters query string timeoutMillisecodns int retryDelayMilliseconds int maxRetries int callback Action<string> Returns Task<string>"
  },
  "api/WebApp.AI.html": {
    "href": "api/WebApp.AI.html",
    "title": "Namespace WebApp.AI | Gong Cha",
    "keywords": "Namespace WebApp.AI Classes Chatbot Core"
  },
  "api/WebApp.APIs.AzureMaps.Weather.html": {
    "href": "api/WebApp.APIs.AzureMaps.Weather.html",
    "title": "Class Weather | Gong Cha",
    "keywords": "Class Weather Namespace WebApp.APIs.AzureMaps Assembly WebApp.dll Provides methods to retrieve weather information from Azure Maps. public class Weather Inheritance object Weather Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Weather() Initializes a new instance of the Weather class. public Weather() Methods GetCurrentCondition() Gets the current weather condition based on the user's location. public Task<CurrentCondition?> GetCurrentCondition() Returns Task<CurrentCondition> The current weather condition or null if the information is not available. GetWeatherIconName(int?) Gets the weather icon name based on the provided icon code. public string? GetWeatherIconName(int? iconCode) Parameters iconCode int? The icon code representing the weather condition. Returns string The name of the weather icon or null if the icon code is not recognized."
  },
  "api/WebApp.APIs.AzureMaps.html": {
    "href": "api/WebApp.APIs.AzureMaps.html",
    "title": "Namespace WebApp.APIs.AzureMaps | Gong Cha",
    "keywords": "Namespace WebApp.APIs.AzureMaps Classes Weather Provides methods to retrieve weather information from Azure Maps."
  },
  "api/WebApp.APIs.GoogleTranslate.GoogleTranslate.html": {
    "href": "api/WebApp.APIs.GoogleTranslate.GoogleTranslate.html",
    "title": "Class GoogleTranslate | Gong Cha",
    "keywords": "Class GoogleTranslate Namespace WebApp.APIs.GoogleTranslate Assembly WebApp.dll Provides translation services using the Google Translate API. public class GoogleTranslate Inheritance object GoogleTranslate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GoogleTranslate() Initializes a new instance of the GoogleTranslate class. public GoogleTranslate() Fields CurrentLanguage Gets or sets the current language for translation. public string CurrentLanguage Field Value string Methods GetPreferredLanguage() Gets the preferred language from the request headers. public string GetPreferredLanguage() Returns string The preferred language or \"en\" if not available. GetSupportedLanguages() Gets the list of supported languages and their codes. public KeyValuePair<string, string>[]? GetSupportedLanguages() Returns KeyValuePair<string, string>[] An array of key-value pairs representing supported languages and their codes. TranslateText(string) Translates the specified text to the current language. public Task<string> TranslateText(string text) Parameters text string The text to be translated. Returns Task<string> The translated text or the original text if translation fails."
  },
  "api/WebApp.APIs.GoogleTranslate.html": {
    "href": "api/WebApp.APIs.GoogleTranslate.html",
    "title": "Namespace WebApp.APIs.GoogleTranslate | Gong Cha",
    "keywords": "Namespace WebApp.APIs.GoogleTranslate Classes GoogleTranslate Provides translation services using the Google Translate API."
  },
  "api/WebApp.Controllers.AIController.html": {
    "href": "api/WebApp.Controllers.AIController.html",
    "title": "Class AIController | Gong Cha",
    "keywords": "Class AIController Namespace WebApp.Controllers Assembly WebApp.dll [ApiController] public class AIController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller AIController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AIController(ILogger<AIController>) public AIController(ILogger<AIController> logger) Parameters logger ILogger<AIController> Methods ClearHistory() Clears the chatbot history in the session. [HttpDelete] [Route(\"AI/ClearHistory\")] public IActionResult ClearHistory() Returns IActionResult GetHistory() Gets the chatbot history from the session. [HttpGet] [Route(\"AI/GetHistory\")] public string GetHistory() Returns string GetHistorySplit() Gets the chatbot history from the session and splits it into an array. [HttpGet] [Route(\"AI/GetHistorySplit\")] public IActionResult GetHistorySplit() Returns IActionResult GetResponse(string) Queries the AI for a response to the given input. [HttpPost] [Route(\"AI/GetResponse/{input}\")] public Task<IActionResult> GetResponse(string input) Parameters input string Returns Task<IActionResult> SetHistory(string) Sets the chatbot history in the session. [HttpPost] [Route(\"AI/SetHistory\")] public void SetHistory(string history) Parameters history string"
  },
  "api/WebApp.Controllers.AccountController.html": {
    "href": "api/WebApp.Controllers.AccountController.html",
    "title": "Class AccountController | Gong Cha",
    "keywords": "Class AccountController Namespace WebApp.Controllers Assembly WebApp.dll Controller responsible for handling user account-related actions, such as login, logout, and user preferences. [AllowAnonymous] [ApiController] public class AccountController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller AccountController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountController(ILogger<AccountController>) Initializes a new instance of the AccountController class. public AccountController(ILogger<AccountController> logger) Parameters logger ILogger<AccountController> The logger instance. Methods AccessDenied() Handles scenarios where users encounter unauthorized access, logging details and redirecting to the configured return URL. [HttpGet] [Route(\"Account/AccessDenied\")] public IActionResult AccessDenied() Returns IActionResult Error() Handles scenarios where users encounter errors, [HttpGet] [Route(\"Account/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult GetEmail() Retrieves user email. [HttpGet] [Route(\"Account/GetEmail\")] public string GetEmail() Returns string GetName() Retrieves user name. [HttpGet] [Route(\"Account/GetName\")] public string GetName() Returns string GetRole() Retrieves user role. [HttpGet] [Route(\"Account/GetRole\")] public string GetRole() Returns string GetUserInfo() Retrieves user name, role, and email in a JSON format. [HttpGet] [Route(\"Account/GetUserInfo\")] public IActionResult GetUserInfo() Returns IActionResult Login(string, string) Initiates user authentication using a specified provider (defaulting to Google) and redirects users to the provider's authentication page. [HttpGet] [Route(\"Account/Login\")] public IActionResult Login(string provider = \"Google\", string returnUrl = \"/\") Parameters provider string returnUrl string Returns IActionResult LoginCallback(string) Upon successful authentication, retrieves user information, assigns appropriate roles (Manager, Cashier, or Customer), sets user preferences, and signs in the user, redirecting to the appropriate location based on roles and returnUrl. [HttpGet] [Route(\"Account/LoginCallback\")] public Task<IActionResult> LoginCallback(string returnUrl) Parameters returnUrl string Returns Task<IActionResult> Logout(string) Handles user sign-out, redirecting users to the appropriate location based on their role. [HttpGet] [Route(\"Account/Logout\")] public IActionResult Logout(string returnUrl) Parameters returnUrl string Returns IActionResult ResetPreferencesToDefault() Resets user preferences to default values. [HttpDelete] [Route(\"Account/ResetPreferencesToDefault\")] public IActionResult ResetPreferencesToDefault() Returns IActionResult SaveUserPreferences(string?, string?, string?, string?) Saves user preferences as cookies and to the database if the user is authenticated. [HttpPost] [Route(\"Account/SaveUserPreferences\")] public IActionResult SaveUserPreferences(string? accCursor = null, string? accTextSize = null, string? accContrast = null, string? accLanguage = null) Parameters accCursor string accTextSize string accContrast string accLanguage string Returns IActionResult"
  },
  "api/WebApp.Controllers.CartController.html": {
    "href": "api/WebApp.Controllers.CartController.html",
    "title": "Class CartController | Gong Cha",
    "keywords": "Class CartController Namespace WebApp.Controllers Assembly WebApp.dll Controller responsible for managing shopping cart operations, including adding, removing, and editing items. [ApiController] public class CartController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller CartController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CartController(ILogger<CartController>, CartService) Initializes a new instance of the CartController class. public CartController(ILogger<CartController> logger, CartService cartService) Parameters logger ILogger<CartController> The logger instance. cartService CartService The service responsible for cart operations. Methods AddItem(AddItemModel) Adds an item to the shopping cart with the specified product ID and customization IDs. [HttpPost] [Route(\"/Cart/AddItem\")] public IActionResult AddItem(AddItemModel model) Parameters model AddItemModel The model containing the product ID and customization IDs. Returns IActionResult Checkout(CheckoutModel) Clears the shopping cart. [HttpPost] [Route(\"/Cart/Checkout\")] public IActionResult Checkout(CheckoutModel model) Parameters model CheckoutModel The model containing user information. Returns IActionResult EditCount(EditCountModel) Edits the quantity of an item in the shopping cart at the specified index. [HttpPost] [Route(\"/Cart/EditCount\")] public IActionResult EditCount(EditCountModel model) Parameters model EditCountModel The model containing the index of the item to edit and whether to increment or decrement the quantity. Returns IActionResult Error() Displays the error view. [HttpGet] [Route(\"/Cart/GetCartSize\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult The error view. GetCartFromSession() Retrieves the shopping cart from the session. [HttpGet] [Route(\"/Cart/GetCartFromSession\")] public Cart GetCartFromSession() Returns Cart The current shopping cart. Index() Displays the shopping cart contents along with the total number of items. [HttpGet] [Route(\"/Cart\")] public IActionResult Index() Returns IActionResult The view containing the shopping cart information. RemoveItem(int) Removes an item from the shopping cart at the specified index. [HttpPost] [Route(\"/Cart/RemoveItem\")] public IActionResult RemoveItem(int index) Parameters index int The index of the item to remove. Returns IActionResult An HTTP result indicating the success of the operation. SetCartInSession(Cart) Sets the provided shopping cart in the session. [HttpPost] [Route(\"/Cart/SetCartInSession\")] public void SetCartInSession(Cart cart) Parameters cart Cart The shopping cart to set in the session."
  },
  "api/WebApp.Controllers.CashierController.html": {
    "href": "api/WebApp.Controllers.CashierController.html",
    "title": "Class CashierController | Gong Cha",
    "keywords": "Class CashierController Namespace WebApp.Controllers Assembly WebApp.dll Controller responsible for managing cashier-related operations, including product categories, best sellers, favorites, and customizations. [Authorize(Roles = \"Cashier, Manager\")] [ApiController] public class CashierController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller CashierController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CashierController(ILogger<CashierController>, IMemoryCache, CartService) Initializes a new instance of the CashierController class. public CashierController(ILogger<CashierController> logger, IMemoryCache cache, CartService cartService) Parameters logger ILogger<CashierController> The logger instance. cache IMemoryCache The memory cache instance. cartService CartService The service responsible for cart operations. Methods Error() Displays the error view. [HttpGet] [Route(\"Cashier/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult The error view. Index() Displays the default view for the cashier controller. [HttpGet] [Route(\"Cashier/\")] public IActionResult Index() Returns IActionResult The default view. LoadCategories() Loads and returns the product categories from the cache or database. [HttpGet] [Route(\"Cashier/LoadCategories\")] public IActionResult LoadCategories() Returns IActionResult The partial view containing the loaded product categories. LoadCustomizations(string) Loads and returns customizations for a selected product. [HttpGet] [Route(\"Cashier/LoadCustomizations\")] public IActionResult LoadCustomizations(string arg) Parameters arg string The ID of the selected product. Returns IActionResult The partial view containing the loaded customizations. LoadProductsBySeries(string) Loads and returns products based on the specified series name. [HttpGet] [Route(\"Cashier/LoadProductsBySeries\")] public IActionResult LoadProductsBySeries(string arg) Parameters arg string The series name. Returns IActionResult The partial view containing the loaded products."
  },
  "api/WebApp.Controllers.CustomerController.html": {
    "href": "api/WebApp.Controllers.CustomerController.html",
    "title": "Class CustomerController | Gong Cha",
    "keywords": "Class CustomerController Namespace WebApp.Controllers Assembly WebApp.dll Controller responsible for managing customer-related operations, including viewing products, categories, best sellers, and favorites. [ApiController] public class CustomerController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller CustomerController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomerController(CartService, IMemoryCache) Initializes a new instance of the CustomerController class. public CustomerController(CartService cartService, IMemoryCache cache) Parameters cartService CartService The cart service instance. cache IMemoryCache The memory cache instance. Methods AddFavorite(int) Adds a product to the user's favorites. [HttpPost] [Route(\"Customer/AddFavorite/{productID}\")] public IActionResult AddFavorite(int productID) Parameters productID int The ID of the product to be added to favorites. Returns IActionResult The result of the operation. Index() Displays the default view for the customer controller, showing the cart items count. [HttpGet] [Route(\"Customer/\")] public IActionResult Index() Returns IActionResult The default view. LoadBestSellers() Loads and returns the best-selling products from the cache or database. [HttpGet] [Route(\"Customer/LoadBestSellers\")] public IActionResult LoadBestSellers() Returns IActionResult The partial view containing the loaded best-selling products. LoadCategories() Loads and returns the product categories from the cache or database. [HttpGet] [Route(\"Customer/LoadCategories\")] public IActionResult LoadCategories() Returns IActionResult The partial view containing the loaded product categories. LoadCustomizations(string) Loads and returns customizations for a selected product. [HttpGet] [Route(\"Customer/LoadCustomizations\")] public IActionResult LoadCustomizations(string arg) Parameters arg string The ID of the selected product. Returns IActionResult The partial view containing the loaded customizations. LoadFavorites() Loads and returns the user's favorite products. [HttpGet] [Route(\"Customer/LoadFavorites\")] public IActionResult LoadFavorites() Returns IActionResult The partial view containing the loaded favorite products. LoadProductsBySeries(string) Loads and returns products based on the specified series name. [HttpGet] [Route(\"Customer/LoadProductsBySeries\")] public IActionResult LoadProductsBySeries(string arg) Parameters arg string The series name. Returns IActionResult The partial view containing the loaded products. RemoveFavorite(int) Controller action for removing a product from the user's favorites. [HttpDelete] [Route(\"Customer/RemoveFavorite/{productID}\")] public IActionResult RemoveFavorite(int productID) Parameters productID int The ID of the product to be removed from favorites. Returns IActionResult The result of the operation and an error if it can't be executed."
  },
  "api/WebApp.Controllers.HomeController.html": {
    "href": "api/WebApp.Controllers.HomeController.html",
    "title": "Class HomeController | Gong Cha",
    "keywords": "Class HomeController Namespace WebApp.Controllers Assembly WebApp.dll Controller responsible for handling requests related to the home page and basic site navigation. [ApiController] public class HomeController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller HomeController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HomeController(ILogger<HomeController>) Initializes a new instance of the HomeController class. public HomeController(ILogger<HomeController> logger) Parameters logger ILogger<HomeController> The logger for HomeController. Methods Error() Handles errors and displays the error view. [HttpGet] [Route(\"/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult The view for the error page. GetPreferredLanguage() Gets the user's preferred language based on the 'Accept-Language' header in the HTTP request. [HttpGet] [Route(\"/GetPreferredLanguage\")] public string GetPreferredLanguage() Returns string Index(bool) Displays the home page and redirects to specific pages based on user roles. [HttpGet] [Route(\"/\")] public IActionResult Index(bool autoRedirect = true) Parameters autoRedirect bool Flag indicating whether to automatically redirect users based on their roles. Returns IActionResult The view for the home page or a redirect to a specific page based on user roles."
  },
  "api/WebApp.Controllers.ManagerController.html": {
    "href": "api/WebApp.Controllers.ManagerController.html",
    "title": "Class ManagerController | Gong Cha",
    "keywords": "Class ManagerController Namespace WebApp.Controllers Assembly WebApp.dll [Authorize(Roles = \"Manager\")] [ApiController] public class ManagerController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller ManagerController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ManagerController(ILogger<ManagerController>, CartService, IMemoryCache) Initializes a new instance of the ManagerController class. public ManagerController(ILogger<ManagerController> logger, CartService cartService, IMemoryCache cache) Parameters logger ILogger<ManagerController> The logger for ManagerController. cartService CartService The service for managing the shopping cart. cache IMemoryCache The cache for storing and retrieving data. Methods AddInventory() Adds a new inventory item to the database. [HttpPost] [Route(\"Manager/AddInventory\")] public IActionResult AddInventory() Returns IActionResult AddProduct() Adds a new product to the database. [HttpPost] [Route(\"Manager/AddProduct\")] public IActionResult AddProduct() Returns IActionResult ClearCache() Clears the cache for categories and best sellers. [HttpDelete] [Route(\"Manager/ClearCache\")] public IActionResult ClearCache() Returns IActionResult DeleteInventory(int) Deletes an inventory item from the database. [HttpDelete] [Route(\"Manager/DeleteInventory/{inv}\")] public IActionResult DeleteInventory(int inv) Parameters inv int Returns IActionResult DeleteProduct(int) Deletes a product from the database. [HttpDelete] [Route(\"Manager/DeleteProduct/{prod}\")] public IActionResult DeleteProduct(int prod) Parameters prod int Returns IActionResult Error() Displays the error view. [HttpGet] [Route(\"Manager/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult Index() Displays the default view for the manager controller. [HttpGet] [Route(\"Manager/\")] public IActionResult Index() Returns IActionResult SaveInventory(Dictionary<string, string>) Saves a list of inventory changes to the database. [HttpPost] [Route(\"Manager/SaveInventory\")] public IActionResult SaveInventory(Dictionary<string, string> payload) Parameters payload Dictionary<string, string> Returns IActionResult SaveProducts(List<Product>) Saves a list of products changes to the database. [HttpPost] [Route(\"Manager/SaveProducts\")] public IActionResult SaveProducts(List<Product> data) Parameters data List<Product> Returns IActionResult ShowExcessReport(Dictionary<string, string>) Displays the excess report. [HttpPost] [Route(\"Manager/ShowExcessReport\")] public IActionResult ShowExcessReport(Dictionary<string, string> payload) Parameters payload Dictionary<string, string> Returns IActionResult ShowInventory() Not implemented. [HttpGet] [Route(\"Manager/ShowInventory\")] public IActionResult ShowInventory() Returns IActionResult ShowManager() Not implemented. [HttpGet] [Route(\"Manager/ShowManager\")] public IActionResult ShowManager() Returns IActionResult ShowPopularityAnalysis(Dictionary<string, string>) Displays the popularity analysis report. [HttpPost] [Route(\"Manager/ShowPopularityAnalysis\")] public IActionResult ShowPopularityAnalysis(Dictionary<string, string> payload) Parameters payload Dictionary<string, string> Returns IActionResult ShowProducts() Not implemented. [HttpGet] [Route(\"Manager/ShowProducts\")] public IActionResult ShowProducts() Returns IActionResult ShowRestockReport() Displays the restock report. [HttpPost] [Route(\"Manager/ShowRestockReport\")] public IActionResult ShowRestockReport() Returns IActionResult ShowSalesReport(Dictionary<string, string>) Displays the sales report. [HttpPost] [Route(\"Manager/ShowSalesReport\")] public IActionResult ShowSalesReport(Dictionary<string, string> payload) Parameters payload Dictionary<string, string> Returns IActionResult ShowSalesTogether(Dictionary<string, string>) Displays the sales together report. [HttpPost] [Route(\"Manager/ShowSalesTogether\")] public IActionResult ShowSalesTogether(Dictionary<string, string> payload) Parameters payload Dictionary<string, string> Returns IActionResult"
  },
  "api/WebApp.Controllers.MenuBoardController.html": {
    "href": "api/WebApp.Controllers.MenuBoardController.html",
    "title": "Class MenuBoardController | Gong Cha",
    "keywords": "Class MenuBoardController Namespace WebApp.Controllers Assembly WebApp.dll Controller responsible for handling requests related to the menu board, including displaying products and handling product details. [ApiController] public class MenuBoardController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller MenuBoardController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MenuBoardController(ILogger<MenuBoardController>, CartService) Initializes a new instance of the MenuBoardController class. public MenuBoardController(ILogger<MenuBoardController> logger, CartService cartService) Parameters logger ILogger<MenuBoardController> The logger for MenuBoardController. cartService CartService The service for managing the shopping cart. Methods Error() Handles errors and displays the error view. [HttpGet] [Route(\"MenuBoard/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult The view for the error page. GetProductsByCategory(string) Gets product names by category for use in a partial view. [HttpGet] [Route(\"MenuBoard/GetProductsByCategory\")] public IActionResult GetProductsByCategory(string category) Parameters category string The product category. Returns IActionResult A partial view with product names. Index(string?) Displays the menu board with filtered products based on the search term and organized by categories. [HttpGet] [Route(\"MenuBoard/\")] public IActionResult Index(string? search = null) Parameters search string The search term used to filter products. Returns IActionResult The view for the menu board with product information. ProductDetail(int) Displays detailed information about a specific product. [HttpGet] [Route(\"MenuBoard/ProductDetail\")] public IActionResult ProductDetail(int id) Parameters id int The unique identifier of the product. Returns IActionResult The view for the product detail page. getProducts() Gets the products and their categories in HTML format for use in a view. [HttpGet] [Route(\"MenuBoard/getProducts\")] public IActionResult getProducts() Returns IActionResult The HTML string containing product information."
  },
  "api/WebApp.Controllers.StoryController.html": {
    "href": "api/WebApp.Controllers.StoryController.html",
    "title": "Class StoryController | Gong Cha",
    "keywords": "Class StoryController Namespace WebApp.Controllers Assembly WebApp.dll [ApiController] public class StoryController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller StoryController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StoryController(ILogger<StoryController>) public StoryController(ILogger<StoryController> logger) Parameters logger ILogger<StoryController> Methods Error() Displays the error view. [HttpGet] [Route(\"Story/Error\")] [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult Index() Displays the default view for the story controller. [HttpGet] [Route(\"Story/\")] public IActionResult Index() Returns IActionResult"
  },
  "api/WebApp.Controllers.html": {
    "href": "api/WebApp.Controllers.html",
    "title": "Namespace WebApp.Controllers | Gong Cha",
    "keywords": "Namespace WebApp.Controllers Classes AIController AccountController Controller responsible for handling user account-related actions, such as login, logout, and user preferences. CartController Controller responsible for managing shopping cart operations, including adding, removing, and editing items. CashierController Controller responsible for managing cashier-related operations, including product categories, best sellers, favorites, and customizations. CustomerController Controller responsible for managing customer-related operations, including viewing products, categories, best sellers, and favorites. HomeController Controller responsible for handling requests related to the home page and basic site navigation. ManagerController MenuBoardController Controller responsible for handling requests related to the menu board, including displaying products and handling product details. StoryController"
  },
  "api/WebApp.Data.CommandHandler.html": {
    "href": "api/WebApp.Data.CommandHandler.html",
    "title": "Class CommandHandler | Gong Cha",
    "keywords": "Class CommandHandler Namespace WebApp.Data Assembly WebApp.dll Handles the execution of database commands using Npgsql. public class CommandHandler Inheritance object CommandHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandler(NpgsqlConnection) Initializes a new instance of the CommandHandler class with the specified NpgsqlConnection. public CommandHandler(NpgsqlConnection connection) Parameters connection NpgsqlConnection The NpgsqlConnection used for executing commands. Methods ExecuteNonQuery(string) Executes a non-query SQL statement, such as an INSERT, UPDATE, or DELETE statement. public void ExecuteNonQuery(string statement) Parameters statement string The SQL statement to be executed. ExecuteReader(string) Executes a database query that returns a data reader. public NpgsqlDataReader? ExecuteReader(string query) Parameters query string The SQL query string to be executed. Returns NpgsqlDataReader A NpgsqlDataReader containing the result of the query, or null in case of an error."
  },
  "api/WebApp.Data.DaoTypeContainer.html": {
    "href": "api/WebApp.Data.DaoTypeContainer.html",
    "title": "Class DaoTypeContainer | Gong Cha",
    "keywords": "Class DaoTypeContainer Namespace WebApp.Data Assembly WebApp.dll Represents a container for accessing various DAOs. public class DaoTypeContainer Inheritance object DaoTypeContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DaoTypeContainer(Dictionary<Type, object>) Initializes a new instance of the DaoTypeContainer class with a given DAO map. public DaoTypeContainer(Dictionary<Type, object> daoTypeMap) Parameters daoTypeMap Dictionary<Type, object> The map containing DAO instances for different types. Methods GetDao<T>() Gets the DAO instance for a specified type. public IDao<T> GetDao<T>() where T : class Returns IDao<T> The DAO instance for the specified type. Type Parameters T The type of the DAO. Exceptions InvalidCastException Thrown if the DAO instance is not of the expected type. GetEmployeeDao() Gets the DAO instance for the Employee type. public EmployeeDao GetEmployeeDao() Returns EmployeeDao The DAO instance for the Employee type. Exceptions InvalidCastException Thrown if the DAO instance is not of the expected type. GetIngredientDao() Gets the DAO instance for the Ingredient type. public IngredientDao GetIngredientDao() Returns IngredientDao The DAO instance for the Ingredient type. Exceptions InvalidCastException Thrown if the DAO instance is not of the expected type. GetInventoryDao() Gets the DAO instance for the Inventory type. public InventoryDao GetInventoryDao() Returns InventoryDao The DAO instance for the Inventory type. Exceptions InvalidCastException Thrown if the DAO instance is not of the expected type. GetOrderDao() Gets the DAO instance for the Order type. public OrderDao GetOrderDao() Returns OrderDao The DAO instance for the Order type. Exceptions InvalidCastException Thrown if the DAO instance is not of the expected type. GetProductDao() Gets the DAO instance for the Product type. public ProductDao GetProductDao() Returns ProductDao The DAO instance for the Product type. Exceptions InvalidCastException Thrown if the DAO instance is not of the expected type. GetProductIngredientsDao() Gets the DAO instance for the ProductIngredients type. public ProductIngredientsDao GetProductIngredientsDao() Returns ProductIngredientsDao The DAO instance for the ProductIngredients type. Exceptions InvalidCastException Thrown if the DAO instance is not of the expected type. GetSeriesInfoDao() Gets the DAO instance for the SeriesInfo type. public SeriesInfoDao GetSeriesInfoDao() Returns SeriesInfoDao The DAO instance for the SeriesInfo type. Exceptions InvalidCastException Thrown if the DAO instance is not of the expected type. GetUserDao() Gets the DAO instance for the User type. public UserDao GetUserDao() Returns UserDao The DAO instance for the User type. Exceptions InvalidCastException Thrown if the DAO instance is not of the expected type."
  },
  "api/WebApp.Data.EmployeeDao.html": {
    "href": "api/WebApp.Data.EmployeeDao.html",
    "title": "Class EmployeeDao | Gong Cha",
    "keywords": "Class EmployeeDao Namespace WebApp.Data Assembly WebApp.dll Data Access Object (DAO) for managing Employee entities in the database. public class EmployeeDao : IDao<Employee> Inheritance object EmployeeDao Implements IDao<Employee> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EmployeeDao(CommandHandler) Initializes a new instance of the EmployeeDao class with the specified CommandHandler. public EmployeeDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler The CommandHandler used to execute SQL commands. Methods Add(Employee) Adds a new entity to the data store. public void Add(Employee t) Parameters t Employee The entity to be added. Delete(Employee) Deletes an entity from the data store. public void Delete(Employee t) Parameters t Employee The entity to be deleted. Get(int) Retrieves an entity by its unique identifier. public Employee Get(int id) Parameters id int The unique identifier of the entity. Returns Employee The entity with the specified identifier, or a default value if not found. GetAll() Retrieves all entities of the specified type. public IEnumerable<Employee> GetAll() Returns IEnumerable<Employee> An enumerable collection of all entities of the specified type. Update(Employee, Employee) Updates an existing entity in the data store. public void Update(Employee t, Employee newT) Parameters t Employee The existing entity to be updated. newT Employee The new values for the entity."
  },
  "api/WebApp.Data.EntityServices.html": {
    "href": "api/WebApp.Data.EntityServices.html",
    "title": "Class EntityServices | Gong Cha",
    "keywords": "Class EntityServices Namespace WebApp.Data Assembly WebApp.dll Provides services for basic CRUD (Create, Read, Update, Delete) operations on entities. public class EntityServices Inheritance object EntityServices Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EntityServices(DaoTypeContainer) Initializes a new instance of the EntityServices class with a specified DaoTypeContainer. public EntityServices(DaoTypeContainer daoTypeContainer) Parameters daoTypeContainer DaoTypeContainer The container providing access to Data Access Objects (DAOs). Methods Add<T>(T) Adds a new entity of type T. public void Add<T>(T t) where T : class Parameters t T The entity to be added. Type Parameters T The type of the entity. Delete<T>(T) Deletes an entity of type T. public void Delete<T>(T t) where T : class Parameters t T The entity to be deleted. Type Parameters T The type of the entity. GetAll<T>() Retrieves all entities of type T. public IEnumerable<T> GetAll<T>() where T : class Returns IEnumerable<T> An enumerable collection of entities of the specified type. Type Parameters T The type of the entity. Get<T>(int) Retrieves an entity of type T by its unique identifier. public T Get<T>(int id) where T : class Parameters id int The unique identifier of the entity. Returns T The entity with the specified identifier, or null if not found. Type Parameters T The type of the entity. Update<T>(T, T) Updates an existing entity of type T with a new entity. public void Update<T>(T t, T newT) where T : class Parameters t T The existing entity to be updated. newT T The new entity data. Type Parameters T The type of the entity."
  },
  "api/WebApp.Data.IDao-1.html": {
    "href": "api/WebApp.Data.IDao-1.html",
    "title": "Interface IDao<T> | Gong Cha",
    "keywords": "Interface IDao<T> Namespace WebApp.Data Assembly WebApp.dll Interface for Data Access Object (DAO) classes responsible for CRUD operations on entities. public interface IDao<T> Type Parameters T Type of entity for which the DAO is defined. Methods Add(T) Adds a new entity to the data store. void Add(T t) Parameters t T The entity to be added. Delete(T) Deletes an entity from the data store. void Delete(T t) Parameters t T The entity to be deleted. Get(int) Retrieves an entity by its unique identifier. T Get(int id) Parameters id int The unique identifier of the entity. Returns T The entity with the specified identifier, or a default value if not found. GetAll() Retrieves all entities of the specified type. IEnumerable<T> GetAll() Returns IEnumerable<T> An enumerable collection of all entities of the specified type. Update(T, T) Updates an existing entity in the data store. void Update(T t, T newT) Parameters t T The existing entity to be updated. newT T The new values for the entity."
  },
  "api/WebApp.Data.IngredientDao.html": {
    "href": "api/WebApp.Data.IngredientDao.html",
    "title": "Class IngredientDao | Gong Cha",
    "keywords": "Class IngredientDao Namespace WebApp.Data Assembly WebApp.dll Data Access Object (DAO) for managing Ingredient entities. public class IngredientDao : IDao<Ingredient> Inheritance object IngredientDao Implements IDao<Ingredient> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IngredientDao(CommandHandler) Initializes a new instance of the IngredientDao class. public IngredientDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler The command handler for executing database commands. Methods Add(Ingredient) Adds a new entity to the data store. public void Add(Ingredient t) Parameters t Ingredient The entity to be added. Delete(Ingredient) Deletes an entity from the data store. public void Delete(Ingredient t) Parameters t Ingredient The entity to be deleted. Get(int) Retrieves an entity by its unique identifier. public Ingredient Get(int id) Parameters id int The unique identifier of the entity. Returns Ingredient The entity with the specified identifier, or a default value if not found. GetAll() Retrieves all entities of the specified type. public IEnumerable<Ingredient> GetAll() Returns IEnumerable<Ingredient> An enumerable collection of all entities of the specified type. GetRecentIngredient() public Ingredient GetRecentIngredient() Returns Ingredient Update(Ingredient, Ingredient) Updates an existing entity in the data store. public void Update(Ingredient t, Ingredient newT) Parameters t Ingredient The existing entity to be updated. newT Ingredient The new values for the entity."
  },
  "api/WebApp.Data.InventoryDao.html": {
    "href": "api/WebApp.Data.InventoryDao.html",
    "title": "Class InventoryDao | Gong Cha",
    "keywords": "Class InventoryDao Namespace WebApp.Data Assembly WebApp.dll Data Access Object (DAO) for managing Inventory entities. public class InventoryDao : IDao<Inventory> Inheritance object InventoryDao Implements IDao<Inventory> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InventoryDao(CommandHandler) Initializes a new instance of the InventoryDao class. public InventoryDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler The command handler for executing database commands. Methods Add(Inventory) Adds a new entity to the data store. public void Add(Inventory t) Parameters t Inventory The entity to be added. Delete(Inventory) Deletes an entity from the data store. public void Delete(Inventory t) Parameters t Inventory The entity to be deleted. Get(int) Retrieves an entity by its unique identifier. public Inventory Get(int id) Parameters id int The unique identifier of the entity. Returns Inventory The entity with the specified identifier, or a default value if not found. GetAll() Retrieves all entities of the specified type. public IEnumerable<Inventory> GetAll() Returns IEnumerable<Inventory> An enumerable collection of all entities of the specified type. GetRecentInventory() public Inventory GetRecentInventory() Returns Inventory Update(Inventory, Inventory) Updates an existing entity in the data store. public void Update(Inventory t, Inventory newT) Parameters t Inventory The existing entity to be updated. newT Inventory The new values for the entity."
  },
  "api/WebApp.Data.OrderDao.html": {
    "href": "api/WebApp.Data.OrderDao.html",
    "title": "Class OrderDao | Gong Cha",
    "keywords": "Class OrderDao Namespace WebApp.Data Assembly WebApp.dll Data Access Object (DAO) for managing Order entities. public class OrderDao : IDao<Order> Inheritance object OrderDao Implements IDao<Order> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OrderDao(CommandHandler) Initializes a new instance of the OrderDao class. public OrderDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler The command handler for executing database commands. Methods Add(Order) Adds a new entity to the data store. public void Add(Order t) Parameters t Order The entity to be added. Delete(Order) Deletes an entity from the data store. public void Delete(Order t) Parameters t Order The entity to be deleted. Get(int) Retrieves an entity by its unique identifier. public Order Get(int id) Parameters id int The unique identifier of the entity. Returns Order The entity with the specified identifier, or a default value if not found. GetAll() Retrieves all entities of the specified type. public IEnumerable<Order> GetAll() Returns IEnumerable<Order> An enumerable collection of all entities of the specified type. GetOrdersBetween(DateTime, DateTime) public List<Order> GetOrdersBetween(DateTime starttime, DateTime endtime) Parameters starttime DateTime endtime DateTime Returns List<Order> GetSalesReport(DateTime, DateTime) public List<Tuple<int, double>> GetSalesReport(DateTime start_time, DateTime end_time) Parameters start_time DateTime end_time DateTime Returns List<Tuple<int, double>> GetSalesTogether(DateTime, DateTime) public List<Tuple<string, string, int>> GetSalesTogether(DateTime start_date, DateTime end_date) Parameters start_date DateTime end_date DateTime Returns List<Tuple<string, string, int>> Update(Order, Order) Updates an existing entity in the data store. public void Update(Order t, Order newT) Parameters t Order The existing entity to be updated. newT Order The new values for the entity."
  },
  "api/WebApp.Data.ProductDao.html": {
    "href": "api/WebApp.Data.ProductDao.html",
    "title": "Class ProductDao | Gong Cha",
    "keywords": "Class ProductDao Namespace WebApp.Data Assembly WebApp.dll Data Access Object (DAO) for managing Product entities. public class ProductDao : IDao<Product> Inheritance object ProductDao Implements IDao<Product> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductDao(CommandHandler) Initializes a new instance of the ProductDao class. public ProductDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler The command handler for executing database commands. Methods Add(Product) Adds a new entity to the data store. public void Add(Product t) Parameters t Product The entity to be added. Delete(Product) Deletes an entity from the data store. public void Delete(Product t) Parameters t Product The entity to be deleted. Get(int) Retrieves an entity by its unique identifier. public Product Get(int id) Parameters id int The unique identifier of the entity. Returns Product The entity with the specified identifier, or a default value if not found. GetAll() Retrieves all entities of the specified type. public IEnumerable<Product> GetAll() Returns IEnumerable<Product> An enumerable collection of all entities of the specified type. GetBestSellingProducts(int) Gets a list of best-selling products based on the specified limit. public IEnumerable<Product> GetBestSellingProducts(int limit = 5) Parameters limit int The maximum number of best-selling products to retrieve (default is 5). Returns IEnumerable<Product> A collection of best-selling products. GetProductsBySeries(string) Gets products by series. public IEnumerable<Product> GetProductsBySeries(string series) Parameters series string The series of products to retrieve. Returns IEnumerable<Product> The products belonging to the specified series. GetRecentProduct() public Product GetRecentProduct() Returns Product GetUniqueSeries(bool, bool, bool) Gets unique product series based on specified criteria. public IEnumerable<string> GetUniqueSeries(bool includeDrinks = true, bool includeHidden = false, bool includeIsOption = false) Parameters includeDrinks bool Include drinks in the result. includeHidden bool Include hidden products in the result. includeIsOption bool Include products marked as options in the result. Returns IEnumerable<string> The unique product series based on the specified criteria. Update(Product, Product) Updates an existing entity in the data store. public void Update(Product t, Product newT) Parameters t Product The existing entity to be updated. newT Product The new values for the entity."
  },
  "api/WebApp.Data.ProductIngredientsDao.html": {
    "href": "api/WebApp.Data.ProductIngredientsDao.html",
    "title": "Class ProductIngredientsDao | Gong Cha",
    "keywords": "Class ProductIngredientsDao Namespace WebApp.Data Assembly WebApp.dll Data Access Object (DAO) for handling operations related to ProductIngredients. public class ProductIngredientsDao : IDao<ProductIngredients> Inheritance object ProductIngredientsDao Implements IDao<ProductIngredients> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductIngredientsDao(CommandHandler) Initializes a new instance of the ProductIngredientsDao class. public ProductIngredientsDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler The command handler used for database operations. Methods Add(ProductIngredients) Adds a new entity to the data store. public void Add(ProductIngredients t) Parameters t ProductIngredients The entity to be added. Delete(ProductIngredients) Deletes an entity from the data store. public void Delete(ProductIngredients t) Parameters t ProductIngredients The entity to be deleted. Get(int) Retrieves an entity by its unique identifier. public ProductIngredients Get(int id) Parameters id int The unique identifier of the entity. Returns ProductIngredients The entity with the specified identifier, or a default value if not found. GetAll() Retrieves all entities of the specified type. public IEnumerable<ProductIngredients> GetAll() Returns IEnumerable<ProductIngredients> An enumerable collection of all entities of the specified type. Update(ProductIngredients, ProductIngredients) Updates an existing entity in the data store. public void Update(ProductIngredients t, ProductIngredients newT) Parameters t ProductIngredients The existing entity to be updated. newT ProductIngredients The new values for the entity. See Also IDao<T>"
  },
  "api/WebApp.Data.SeriesInfoDao.html": {
    "href": "api/WebApp.Data.SeriesInfoDao.html",
    "title": "Class SeriesInfoDao | Gong Cha",
    "keywords": "Class SeriesInfoDao Namespace WebApp.Data Assembly WebApp.dll Data Access Object (DAO) for handling operations related to SeriesInfo. public class SeriesInfoDao : IDao<SeriesInfo> Inheritance object SeriesInfoDao Implements IDao<SeriesInfo> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SeriesInfoDao(CommandHandler) Initializes a new instance of the SeriesInfoDao class. public SeriesInfoDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler The command handler used for database operations. Methods Add(SeriesInfo) Adds a new entity to the data store. public void Add(SeriesInfo t) Parameters t SeriesInfo The entity to be added. Delete(SeriesInfo) Deletes an entity from the data store. public void Delete(SeriesInfo t) Parameters t SeriesInfo The entity to be deleted. Get(int) Retrieves an entity by its unique identifier. public SeriesInfo Get(int id) Parameters id int The unique identifier of the entity. Returns SeriesInfo The entity with the specified identifier, or a default value if not found. Get(string) public SeriesInfo Get(string name) Parameters name string Returns SeriesInfo GetAll() Retrieves all entities of the specified type. public IEnumerable<SeriesInfo> GetAll() Returns IEnumerable<SeriesInfo> An enumerable collection of all entities of the specified type. Update(SeriesInfo, SeriesInfo) Updates an existing entity in the data store. public void Update(SeriesInfo t, SeriesInfo newT) Parameters t SeriesInfo The existing entity to be updated. newT SeriesInfo The new values for the entity. See Also IDao<T>"
  },
  "api/WebApp.Data.UnitOfWork.html": {
    "href": "api/WebApp.Data.UnitOfWork.html",
    "title": "Class UnitOfWork | Gong Cha",
    "keywords": "Class UnitOfWork Namespace WebApp.Data Assembly WebApp.dll Represents the Unit of Work pattern for managing database operations. public class UnitOfWork Inheritance object UnitOfWork Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UnitOfWork(string) Initializes a new instance of the UnitOfWork class. public UnitOfWork(string databaseName = \"\") Parameters databaseName string The name of the database to connect to. Methods Add<T>(T) Adds an entity to the database. public void Add<T>(T t) where T : class Parameters t T The entity to be added. Type Parameters T The type of the entity. CloseConnection() Closes the connection to the database. public void CloseConnection() Delete<T>(T) Deletes an entity from the database. public void Delete<T>(T t) where T : class Parameters t T The entity to be deleted. Type Parameters T The type of the entity. GetAll<T>() Retrieves all entities of a specified type from the database. public IEnumerable<T> GetAll<T>() where T : class Returns IEnumerable<T> A collection of entities. Type Parameters T The type of the entities. GetBestSellingProducts(int) Retrieves a collection of best-selling products up to the specified limit. public IEnumerable<Product> GetBestSellingProducts(int limit) Parameters limit int The maximum number of best-selling products to retrieve. Returns IEnumerable<Product> A collection of best-selling products. GetOrdersBetween(DateTime, DateTime) public List<Order> GetOrdersBetween(DateTime starttime, DateTime endtime) Parameters starttime DateTime endtime DateTime Returns List<Order> GetProductsBySeries(string) Retrieves a collection of products based on the specified series. public IEnumerable<Product> GetProductsBySeries(string series) Parameters series string The series to filter products by. Returns IEnumerable<Product> A collection of products belonging to the specified series. GetRecentIngredient() public Ingredient GetRecentIngredient() Returns Ingredient GetRecentInventory() public Inventory GetRecentInventory() Returns Inventory GetRecentProduct() public Product GetRecentProduct() Returns Product GetSalesReport(DateTime, DateTime) public List<Tuple<int, double>> GetSalesReport(DateTime starttime, DateTime endtime) Parameters starttime DateTime endtime DateTime Returns List<Tuple<int, double>> GetSalesTogether(DateTime, DateTime) public List<Tuple<string, string, int>> GetSalesTogether(DateTime starttime, DateTime endtime) Parameters starttime DateTime endtime DateTime Returns List<Tuple<string, string, int>> GetSeriesInfo(string) Retrieves series information based on the specified series name. public SeriesInfo GetSeriesInfo(string name) Parameters name string The name of the series to retrieve information for. Returns SeriesInfo Series information for the specified series name. GetUniqueSeries(bool, bool, bool) Retrieves a collection of unique series based on optional filters. public IEnumerable<string> GetUniqueSeries(bool includeDrinks = true, bool includeHidden = false, bool includeIsOption = false) Parameters includeDrinks bool Include drinks in the result. includeHidden bool Include hidden products in the result. includeIsOption bool Include option products in the result. Returns IEnumerable<string> A collection of unique series based on the specified filters. GetUser(string) Retrieves a user based on the specified email address. public User? GetUser(string email) Parameters email string The email address of the user to retrieve. Returns User The user associated with the specified email address, or null if not found. Get<T>(int) Retrieves an entity from the database by its ID. public T Get<T>(int id) where T : class Parameters id int The ID of the entity. Returns T The retrieved entity. Type Parameters T The type of the entity. Update<T>(T, T) Updates an entity in the database. public void Update<T>(T t, T newT) where T : class Parameters t T The original entity. newT T The new entity data. Type Parameters T The type of the entity."
  },
  "api/WebApp.Data.UserDao.html": {
    "href": "api/WebApp.Data.UserDao.html",
    "title": "Class UserDao | Gong Cha",
    "keywords": "Class UserDao Namespace WebApp.Data Assembly WebApp.dll Data Access Object (DAO) for managing user entities in the database. public class UserDao : IDao<User> Inheritance object UserDao Implements IDao<User> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserDao(CommandHandler) Initializes a new instance of the UserDao class. public UserDao(CommandHandler commandHandler) Parameters commandHandler CommandHandler The command handler for executing database queries. Methods Add(User) Adds a new user entity to the database. public void Add(User t) Parameters t User The user entity to be added. Delete(User) Deletes a user entity from the database. public void Delete(User t) Parameters t User The user entity to be deleted. Get(int) Not supported for user entities. Throws a NotSupportedException. public User Get(int id) Parameters id int The unique identifier of the user. Returns User Throws a NotSupportedException. Get(string) Gets a user entity by email. public User? Get(string email) Parameters email string The email address of the user. Returns User The user entity with the specified email, or null if not found. GetAll() Gets all user entities from the database. public IEnumerable<User> GetAll() Returns IEnumerable<User> An enumerable collection of all user entities. Update(User, User) Updates an existing user entity in the database. public void Update(User t, User newT) Parameters t User The existing user entity to be updated. newT User The new data for the user entity."
  },
  "api/WebApp.Data.html": {
    "href": "api/WebApp.Data.html",
    "title": "Namespace WebApp.Data | Gong Cha",
    "keywords": "Namespace WebApp.Data Classes CommandHandler Handles the execution of database commands using Npgsql. DaoTypeContainer Represents a container for accessing various DAOs. EmployeeDao Data Access Object (DAO) for managing Employee entities in the database. EntityServices Provides services for basic CRUD (Create, Read, Update, Delete) operations on entities. IngredientDao Data Access Object (DAO) for managing Ingredient entities. InventoryDao Data Access Object (DAO) for managing Inventory entities. OrderDao Data Access Object (DAO) for managing Order entities. ProductDao Data Access Object (DAO) for managing Product entities. ProductIngredientsDao Data Access Object (DAO) for handling operations related to ProductIngredients. SeriesInfoDao Data Access Object (DAO) for handling operations related to SeriesInfo. UnitOfWork Represents the Unit of Work pattern for managing database operations. UserDao Data Access Object (DAO) for managing user entities in the database. Interfaces IDao<T> Interface for Data Access Object (DAO) classes responsible for CRUD operations on entities."
  },
  "api/WebApp.Models.AzureMaps.Weather.CurrentCondition.html": {
    "href": "api/WebApp.Models.AzureMaps.Weather.CurrentCondition.html",
    "title": "Class CurrentCondition | Gong Cha",
    "keywords": "Class CurrentCondition Namespace WebApp.Models.AzureMaps.Weather Assembly WebApp.dll Represents the current weather condition, including temperature and icon code. public class CurrentCondition Inheritance object CurrentCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CurrentCondition(double?, int?) Initializes a new instance of the CurrentCondition class. public CurrentCondition(double? temperature, int? iconCode) Parameters temperature double? The current temperature. iconCode int? The icon code representing the weather condition. Properties IconCode Gets or sets the icon code representing the weather condition. public int? IconCode { get; set; } Property Value int? Temperature Gets or sets the current temperature. public double? Temperature { get; set; } Property Value double?"
  },
  "api/WebApp.Models.AzureMaps.Weather.html": {
    "href": "api/WebApp.Models.AzureMaps.Weather.html",
    "title": "Namespace WebApp.Models.AzureMaps.Weather | Gong Cha",
    "keywords": "Namespace WebApp.Models.AzureMaps.Weather Classes CurrentCondition Represents the current weather condition, including temperature and icon code."
  },
  "api/WebApp.Models.Cart.Cart.html": {
    "href": "api/WebApp.Models.Cart.Cart.html",
    "title": "Class Cart | Gong Cha",
    "keywords": "Class Cart Namespace WebApp.Models.Cart Assembly WebApp.dll Represents a shopping cart that stores items added by the user. public class Cart Inheritance object Cart Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Cart() Initializes a new instance of the Cart class. public Cart() Properties Items Gets or sets the list of items in the cart. public List<Item> Items { get; set; } Property Value List<Item> Total Gets the total cost of all items in the cart. public double Total { get; } Property Value double Methods AddItem(Item) Adds an item to the cart. If the same item with the same options exists, updates the quantity instead. public void AddItem(Item item) Parameters item Item The item to add to the cart. Clear() Clears all items from the cart. public void Clear() RemoveItem(int) Removes the item at the specified index from the cart. public void RemoveItem(int index) Parameters index int The index of the item to remove. RemoveItem(Item) Removes the specified item from the cart. public void RemoveItem(Item item) Parameters item Item The item to remove. TotalCost() Calculates and returns the total cost of all items in the cart. public double TotalCost() Returns double The total cost of items in the cart."
  },
  "api/WebApp.Models.Cart.CartService.html": {
    "href": "api/WebApp.Models.Cart.CartService.html",
    "title": "Class CartService | Gong Cha",
    "keywords": "Class CartService Namespace WebApp.Models.Cart Assembly WebApp.dll Provides functionality to interact with the user's shopping cart stored in the session. public class CartService Inheritance object CartService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CartService(IHttpContextAccessor) Initializes a new instance of the CartService class. public CartService(IHttpContextAccessor httpContextAccessor) Parameters httpContextAccessor IHttpContextAccessor The HTTP context accessor. Methods GetCartFromSession() Retrieves the user's shopping cart from the session. If the cart is not found, a new cart is created and stored in the session. public Cart GetCartFromSession() Returns Cart The user's shopping cart. SetCartInSession(Cart) Sets the specified shopping cart in the session. public void SetCartInSession(Cart cart) Parameters cart Cart The shopping cart to store in the session."
  },
  "api/WebApp.Models.Cart.Item.html": {
    "href": "api/WebApp.Models.Cart.Item.html",
    "title": "Class Item | Gong Cha",
    "keywords": "Class Item Namespace WebApp.Models.Cart Assembly WebApp.dll Represents an item in the user's shopping cart. public class Item Inheritance object Item Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Item(Product, List<Product>, int) Initializes a new instance of the Item class. public Item(Product product, List<Product> options, int quantity) Parameters product Product The main product associated with the item. options List<Product> The list of product options associated with the item. quantity int The quantity of the item. Properties Options Gets or sets the list of product options associated with the item. public List<Product> Options { get; set; } Property Value List<Product> Product Gets or sets the product associated with the item. public Product Product { get; set; } Property Value Product Quantity Gets or sets the quantity of the item. public int Quantity { get; set; } Property Value int Methods Price() Calculates and returns the total price of the item. public double Price() Returns double The total price of the item."
  },
  "api/WebApp.Models.Cart.html": {
    "href": "api/WebApp.Models.Cart.html",
    "title": "Namespace WebApp.Models.Cart | Gong Cha",
    "keywords": "Namespace WebApp.Models.Cart Classes Cart Represents a shopping cart that stores items added by the user. CartService Provides functionality to interact with the user's shopping cart stored in the session. Item Represents an item in the user's shopping cart."
  },
  "api/WebApp.Models.ErrorViewModel.html": {
    "href": "api/WebApp.Models.ErrorViewModel.html",
    "title": "Class ErrorViewModel | Gong Cha",
    "keywords": "Class ErrorViewModel Namespace WebApp.Models Assembly WebApp.dll Represents a model for handling errors in the application. public class ErrorViewModel Inheritance object ErrorViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RequestId Gets or sets the unique identifier for the current request. public string? RequestId { get; set; } Property Value string ShowRequestId Gets a value indicating whether to show the request ID. public bool ShowRequestId { get; } Property Value bool"
  },
  "api/WebApp.Models.JsonModels.AddItemModel.html": {
    "href": "api/WebApp.Models.JsonModels.AddItemModel.html",
    "title": "Class AddItemModel | Gong Cha",
    "keywords": "Class AddItemModel Namespace WebApp.Models.JsonModels Assembly WebApp.dll public class AddItemModel Inheritance object AddItemModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CustomizationIds public List<int> CustomizationIds { get; set; } Property Value List<int> ProductId public int ProductId { get; set; } Property Value int Quantity public int Quantity { get; set; } Property Value int"
  },
  "api/WebApp.Models.JsonModels.CheckoutModel.html": {
    "href": "api/WebApp.Models.JsonModels.CheckoutModel.html",
    "title": "Class CheckoutModel | Gong Cha",
    "keywords": "Class CheckoutModel Namespace WebApp.Models.JsonModels Assembly WebApp.dll public class CheckoutModel Inheritance object CheckoutModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email public string Email { get; set; } Property Value string Name public string Name { get; set; } Property Value string Role public string Role { get; set; } Property Value string"
  },
  "api/WebApp.Models.JsonModels.EditCountModel.html": {
    "href": "api/WebApp.Models.JsonModels.EditCountModel.html",
    "title": "Class EditCountModel | Gong Cha",
    "keywords": "Class EditCountModel Namespace WebApp.Models.JsonModels Assembly WebApp.dll public class EditCountModel Inheritance object EditCountModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Index public int Index { get; set; } Property Value int IsIncrement public bool IsIncrement { get; set; } Property Value bool"
  },
  "api/WebApp.Models.JsonModels.html": {
    "href": "api/WebApp.Models.JsonModels.html",
    "title": "Namespace WebApp.Models.JsonModels | Gong Cha",
    "keywords": "Namespace WebApp.Models.JsonModels Classes AddItemModel CheckoutModel EditCountModel"
  },
  "api/WebApp.Models.UnitOfWork.Employee.html": {
    "href": "api/WebApp.Models.UnitOfWork.Employee.html",
    "title": "Class Employee | Gong Cha",
    "keywords": "Class Employee Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the Employee table. public class Employee Inheritance object Employee Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Employee(int, string, string, bool, string) Initializes a new instance of the Employee class. public Employee(int id, string name, string password, bool isManager, string email) Parameters id int The unique identifier for the employee. name string The name of the employee. password string The password associated with the employee's account. isManager bool A value indicating whether the employee is a manager. email string The email address of the employee. Properties Email Gets or sets the email address of the employee. public string Email { get; set; } Property Value string Id Gets or sets the unique identifier for the employee. public int Id { get; set; } Property Value int IsManager Gets or sets a value indicating whether the employee is a manager. public bool IsManager { get; set; } Property Value bool Name Gets or sets the name of the employee. public string Name { get; set; } Property Value string Password Gets or sets the password associated with the employee's account. public string Password { get; set; } Property Value string"
  },
  "api/WebApp.Models.UnitOfWork.Ingredient.html": {
    "href": "api/WebApp.Models.UnitOfWork.Ingredient.html",
    "title": "Class Ingredient | Gong Cha",
    "keywords": "Class Ingredient Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the Ingredient table. public class Ingredient Inheritance object Ingredient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Ingredient(int, string) Constructor for the Ingredient class. public Ingredient(int id, string name) Parameters id int name string Properties Id Gets or sets the unique identifier for the inventory item. public int Id { get; set; } Property Value int Name Gets or sets the identifier of the associated ingredient. public string Name { get; set; } Property Value string"
  },
  "api/WebApp.Models.UnitOfWork.Inventory.html": {
    "href": "api/WebApp.Models.UnitOfWork.Inventory.html",
    "title": "Class Inventory | Gong Cha",
    "keywords": "Class Inventory Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the Inventory table. public class Inventory Inheritance object Inventory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Inventory(int, int, int, int) Constructor for the Inventory class. public Inventory(int id, int ingredientId, int quantity, int fillLevel) Parameters id int ingredientId int quantity int fillLevel int Properties FillLevel Gets or sets the fill level of the inventory. public int FillLevel { get; set; } Property Value int Id Gets or sets the unique identifier for the inventory item. public int Id { get; set; } Property Value int IngredientId Gets or sets the identifier of the associated ingredient. public int IngredientId { get; set; } Property Value int Quantity Gets or sets the quantity of the ingredient in the inventory. public int Quantity { get; set; } Property Value int"
  },
  "api/WebApp.Models.UnitOfWork.Order.html": {
    "href": "api/WebApp.Models.UnitOfWork.Order.html",
    "title": "Class Order | Gong Cha",
    "keywords": "Class Order Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the Order table. public class Order Inheritance object Order Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Order(int, int, string, DateTime, double, List<int>) Constructor for the Order class. public Order(int id, int employeeId, string customerName, DateTime orderDate, double totalPrice, List<int> itemIds) Parameters id int employeeId int customerName string orderDate DateTime totalPrice double itemIds List<int> Properties CustomerName Gets or sets the name of the customer placing the order. public string CustomerName { get; set; } Property Value string EmployeeId Gets or sets the identifier of the employee associated with the order. public int EmployeeId { get; set; } Property Value int Id Gets or sets the unique identifier for the order. public int Id { get; set; } Property Value int ItemIds Gets or sets the list of item identifiers associated with the order. public List<int> ItemIds { get; set; } Property Value List<int> OrderDate Gets or sets the date and time when the order was placed. public DateTime OrderDate { get; set; } Property Value DateTime TotalPrice Gets or sets the total price of the order. public double TotalPrice { get; set; } Property Value double"
  },
  "api/WebApp.Models.UnitOfWork.Product.html": {
    "href": "api/WebApp.Models.UnitOfWork.Product.html",
    "title": "Class Product | Gong Cha",
    "keywords": "Class Product Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the Product table. public class Product Inheritance object Product Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Product(int, string, double, string, string, bool, bool, bool) Constructor for the Product class. public Product(int id, string name, double price, string series, string imgUrl, bool hidden, bool isOption, bool isDrink) Parameters id int name string price double series string imgUrl string hidden bool isOption bool isDrink bool Properties Hidden Gets or sets a value indicating whether the product is hidden. public bool Hidden { get; set; } Property Value bool Id Gets or sets the unique identifier for the product. public int Id { get; set; } Property Value int ImgUrl Gets or sets the URL of the product's image. public string ImgUrl { get; set; } Property Value string IsDrink Gets or sets a value indicating whether the product is a drink. public bool IsDrink { get; set; } Property Value bool IsOption Gets or sets a value indicating whether the product is an option. public bool IsOption { get; set; } Property Value bool Name Gets or sets the name of the product. public string Name { get; set; } Property Value string Price Gets or sets the price of the product. public double Price { get; set; } Property Value double Series Gets or sets the series to which the product belongs. public string Series { get; set; } Property Value string"
  },
  "api/WebApp.Models.UnitOfWork.ProductIngredients.html": {
    "href": "api/WebApp.Models.UnitOfWork.ProductIngredients.html",
    "title": "Class ProductIngredients | Gong Cha",
    "keywords": "Class ProductIngredients Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the ProductIngredients table. public class ProductIngredients Inheritance object ProductIngredients Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProductIngredients(int, List<int>) Constructor for the ProductIngredients class. public ProductIngredients(int productId, List<int> ingredientIds) Parameters productId int ingredientIds List<int> Properties IngredientIds Gets or sets the list of unique identifiers of the associated ingredients. public List<int> IngredientIds { get; set; } Property Value List<int> ProductId Gets or sets the unique identifier of the associated product. public int ProductId { get; set; } Property Value int"
  },
  "api/WebApp.Models.UnitOfWork.SeriesInfo.html": {
    "href": "api/WebApp.Models.UnitOfWork.SeriesInfo.html",
    "title": "Class SeriesInfo | Gong Cha",
    "keywords": "Class SeriesInfo Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll This class is used to represent a row in the series_info table. public class SeriesInfo Inheritance object SeriesInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SeriesInfo(string, string, bool, bool, bool, bool) Constructor for the SeriesInfo class. public SeriesInfo(string name, string img_url, bool multi_selectable, bool is_product, bool is_customization, bool is_hidden) Parameters name string The name of the series. img_url string The URL of the image associated with the series. multi_selectable bool Whether or not the series is multi-selectable. is_product bool Whether or not the series is a product. is_customization bool Whether or not the series is a customization. is_hidden bool Whether or not the series is hidden. Properties ImgUrl Gets or sets the URL of the image associated with the series. public string ImgUrl { get; set; } Property Value string IsCustomization Gets or sets a value indicating whether the series is a customization. public bool IsCustomization { get; set; } Property Value bool IsHidden Gets or sets a value indicating whether the series is hidden. public bool IsHidden { get; set; } Property Value bool IsProduct Gets or sets a value indicating whether the series is considered a product. public bool IsProduct { get; set; } Property Value bool MultiSelectable Gets or sets a value indicating whether the series is multi-selectable. public bool MultiSelectable { get; set; } Property Value bool Name Gets or sets the name of the series. public string Name { get; set; } Property Value string"
  },
  "api/WebApp.Models.UnitOfWork.User.html": {
    "href": "api/WebApp.Models.UnitOfWork.User.html",
    "title": "Class User | Gong Cha",
    "keywords": "Class User Namespace WebApp.Models.UnitOfWork Assembly WebApp.dll Represents information about a user in the application. public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors User(string, string, int[], string, string, string, string) Initializes a new instance of the User class. public User(string name, string email, int[] favorites, string accCursor = \"false\", string accTextSize = \"false\", string accContrast = \"normal\", string accLanguage = \"\") Parameters name string The name of the user. email string The email address of the user. favorites int[] The array of user favorites. accCursor string The accessibility cursor setting for the user. accTextSize string The accessibility text size setting for the user. accContrast string The accessibility contrast setting for the user. accLanguage string The accessibility language setting for the user. Properties AccContrast Gets or sets the accessibility contrast setting for the user. public string AccContrast { get; set; } Property Value string AccCursor Gets or sets the accessibility cursor setting for the user. public string AccCursor { get; set; } Property Value string AccLanguage Gets or sets the accessibility language setting for the user. public string AccLanguage { get; set; } Property Value string AccTextSize Gets or sets the accessibility text size setting for the user. public string AccTextSize { get; set; } Property Value string Email Gets or sets the email address of the user. public string Email { get; set; } Property Value string Favorites Gets or sets the array of user favorites. public int[] Favorites { get; set; } Property Value int[] Name Gets or sets the name of the user. public string Name { get; set; } Property Value string"
  },
  "api/WebApp.Models.UnitOfWork.html": {
    "href": "api/WebApp.Models.UnitOfWork.html",
    "title": "Namespace WebApp.Models.UnitOfWork | Gong Cha",
    "keywords": "Namespace WebApp.Models.UnitOfWork Classes Employee This class is used to represent a row in the Employee table. Ingredient This class is used to represent a row in the Ingredient table. Inventory This class is used to represent a row in the Inventory table. Order This class is used to represent a row in the Order table. Product This class is used to represent a row in the Product table. ProductIngredients This class is used to represent a row in the ProductIngredients table. SeriesInfo This class is used to represent a row in the series_info table. User Represents information about a user in the application."
  },
  "api/WebApp.Models.ViewModels.CustomizationViewModel.html": {
    "href": "api/WebApp.Models.ViewModels.CustomizationViewModel.html",
    "title": "Class CustomizationViewModel | Gong Cha",
    "keywords": "Class CustomizationViewModel Namespace WebApp.Models.ViewModels Assembly WebApp.dll Represents a view model for customization-related views. public class CustomizationViewModel Inheritance object CustomizationViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Products Gets or sets the list of products for customization. public List<Product>? Products { get; set; } Property Value List<Product> SelectedProduct Gets or sets the selected product for customization. public Product? SelectedProduct { get; set; } Property Value Product SeriesInformation Gets or sets the list of series information for customization. public List<SeriesInfo>? SeriesInformation { get; set; } Property Value List<SeriesInfo>"
  },
  "api/WebApp.Models.ViewModels.EditViewModel.html": {
    "href": "api/WebApp.Models.ViewModels.EditViewModel.html",
    "title": "Class EditViewModel | Gong Cha",
    "keywords": "Class EditViewModel Namespace WebApp.Models.ViewModels Assembly WebApp.dll Represents a view model for editing cart-related views. public class EditViewModel Inheritance object EditViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Cart Gets or sets the cart to be edited. public Cart? Cart { get; set; } Property Value Cart Index Gets or sets the index of the cart item to be edited. public int Index { get; set; } Property Value int Products Gets or sets the list of products for customization. public List<Product>? Products { get; set; } Property Value List<Product> SeriesInformation Gets or sets the list of series information for customization. public List<SeriesInfo>? SeriesInformation { get; set; } Property Value List<SeriesInfo>"
  },
  "api/WebApp.Models.ViewModels.html": {
    "href": "api/WebApp.Models.ViewModels.html",
    "title": "Namespace WebApp.Models.ViewModels | Gong Cha",
    "keywords": "Namespace WebApp.Models.ViewModels Classes CustomizationViewModel Represents a view model for customization-related views. EditViewModel Represents a view model for editing cart-related views."
  },
  "api/WebApp.Models.html": {
    "href": "api/WebApp.Models.html",
    "title": "Namespace WebApp.Models | Gong Cha",
    "keywords": "Namespace WebApp.Models Classes ErrorViewModel Represents a model for handling errors in the application."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Gong Cha",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Gong Cha",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Gong Cha",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "wwwroot/lib/jquery-validation/LICENSE.html": {
    "href": "wwwroot/lib/jquery-validation/LICENSE.html",
    "title": "The MIT License (MIT) | Gong Cha",
    "keywords": "The MIT License (MIT) Copyright Jörn Zaefferer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}