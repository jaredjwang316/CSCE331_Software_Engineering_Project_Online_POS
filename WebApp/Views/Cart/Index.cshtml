@* 

*@


@using WebApp.Data
@using WebApp.Models.Cart
@model Cart

<style>
    body {
        background-image: url("https://order.gongchausa.com/static/media/backgrounds.12ca03b5bb94af521d4f.png");
        background-repeat: repeat-y;
        background-size: contain;
        background-color: #E7E7E7;
    }
    img {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -webkit-user-drag: none;
        -khtml-user-drag: none;
        -moz-user-drag: none;
        -o-user-drag: none;
    }
    .cart-container {
        display: grid;
        grid-template-columns: repeat(1, 1fr);
        gap: 10px;
        margin: 0 20px;
        border-radius: 10px;
        background-color: white;
        box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.2);
    }
    .product {
        display: flex;
        border-bottom: 1px solid #E7E7E7;
        padding-bottom: 10px;
        margin-left: 50px;
        margin-right: 50px;
        margin-top: 10px;
    }
    .product:last-child {
        border-bottom: none;
        margin-bottom: 10px;
    }
    .image-container {
        margin-right: 60px;
    }
    .image-container img {
        height: 7rem;
    }
    .item-info {
        margin-top: 15px;
    }
    .item-name h3 {
        font-size: 1.1rem;
        font-weight: bold;
        margin-bottom: 0;
        font-family: Lusitana;
    }
    .option {
        margin-top: -15px;
    }
    .option p {
        font-size: 1rem;
        padding-top: 0;
        font-family: Lusitana;
    }
    .remove-item-btn {
        background-color: rgb(170, 0, 0);
        color: white;
        border: none;
        border-radius: 50%;
        width: 1.3rem;
        height: 1.3rem;
        font-size: 0.7rem;
        font-weight: bold;
        margin-top: 0.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        line-height: 1.5rem;
    }

    @* Edit Styles *@
    .edit-container {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        align-items: center;
        margin-left: auto;
        margin-bottom: -30px;
    }
    .edit-count {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }
    .count {
        margin: 0;
        font-size: 1.1rem;
        font-weight: bold;
        font-family: Lusitana;
    }
    .edit-count-btn {
        background-color: rgb(170, 0, 0);
        color: white;
        border: none;
        border-radius: 50%;
        width: 1.3rem;
        height: 1.3rem;
        font-size: 0.7rem;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .edit-options-btn {
        background-color: rgb(170, 0, 0);
        color: white;
        border: none;
        border-radius: 5px;
        width: 4rem;
        font-size: 0.7rem;
        font-weight: bold;
    }
    .cost {
        font-size: 1.1rem;
        font-weight: bold;
        margin-bottom: 0rem;
        font-family: Lusitana;
        margin-bottom: 2rem;
    }
</style>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    $(document).on('click', '.remove-item-btn', function() {
        var index = $(this).attr("id");

        $.ajax({
            url: "/Cart/RemoveItem",
            type: "POST",
            data: { index: index },
            error: function () {
                console.log("Error removing from cart");
            }
        });

        location.reload();
    });

    $(document).on('click', '.edit-count-btn', function() {
        var index = $(this).attr("id");
        var isIncrement = $(this).text() == "+";

        $.ajax({
            url: "/Cart/EditCount",
            type: "POST",
            data: { index: index, isIncrement: isIncrement },
            error: function () {
                console.log("Error editing count");
            }
        });

        location.reload();
    });
</script>

<button class="clear-cart-btn">Clear</button>
<div class="cart-container">

        @{
            UnitOfWork unit = new(Config.AWS_DB_NAME);
        }

        @foreach (var item in Model.Items.Select((value, index) => new { value, index }))  {
            <div class="product">
                @* Id = index of item *@
                <button class="remove-item-btn" id="@item.index">X</button>
                @if(!User.IsInRole("Admin") && !User.IsInRole("Cashier")) {
                    <div class="image-container">
                        <img src="@item.value.Product.ImgUrl" />
                    </div>
                }
                <div class="item-info">
                    <div class="item-name">
                        <h3>@item.value.Product.Name</h3>
                    </div>
                    <div class="item-options">
                        @foreach (var option in item.value.Options) {
                            @if (option.Series == "Size") {
                                <p class="item-option-size">@option.Name</p>
                            }
                        }
                        <div class="option"><p>
                        @{
                            string? prevSeries = null;
                            bool isFirstOptionInSeries = true;
                            var optionsText = new System.Text.StringBuilder();
                        }
                        @foreach(var option in item.value.Options) {
                            string currSeries = option.Series;
                            if (currSeries == "Size") continue;
                            if (prevSeries != null && currSeries != prevSeries) {
                                // insert '|'
                                optionsText.Append(" | ");
                                isFirstOptionInSeries = true;
                            } else if (!isFirstOptionInSeries) {
                                // insert ',' if not first option in series
                                optionsText.Append(", ");
                            }

                            prevSeries = currSeries;
                            optionsText.Append(option.Name);
                            isFirstOptionInSeries = false;
                        }
                        @optionsText.ToString()
                        </p></div>
                    </div>
                    <!--item-options-->
                </div>
                <!--item-info-->
                <div class="edit-container">
                    <div class="edit-count">
                        <button class="edit-count-btn" id="@item.index">-</button>
                        <p class="count">@item.value.Quantity</p>
                        <button class="edit-count-btn" id="@item.index">+</button>
                    </div>
                    <button class="edit-options-btn">Edit</button>
                    <p class="cost">@item.value.Price().ToString("C")</p>
                </div>
            </div>
            <!--product-->
        }
</div>
