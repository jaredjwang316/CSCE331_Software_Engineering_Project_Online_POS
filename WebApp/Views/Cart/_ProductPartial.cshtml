@* 
    File: Views/Cart/_ProductPartial.cshtml
    Author: Griffin Beaudreau
    Date: November 24, 2023
    Purpose: This partial view is used to display a single product in the cart.
*@

@using WebApp.Models.Cart
@using WebApp.APIs.GoogleTranslate
@{
    var translator = new GoogleTranslate();
    var productNames = Model.Select(i => i.Product.Name);

    var optionNames = Model.SelectMany(i => i.Options).Where(o => o.Series != "Size").Select(o => o.Name);
    var sizes = Model.SelectMany(i => i.Options).Where(o => o.Series == "Size").Select(o => o.Name);
    var staticText = new List<string> {
        "Decrease quantity",
        "Increase quantity",
        "Remove item",
        "Remove"
    };
    
    var productNamesTask = translator.Translate(productNames);
    var optionNamesTask = translator.Translate(optionNames);
    var sizesTask = translator.Translate(sizes);
    var staticTextTask = translator.TranslateAsDict(staticText);

    await Task.WhenAll(productNamesTask, optionNamesTask, sizesTask, staticTextTask);

    var productNamesTranslated = new Queue<string>(productNamesTask.Result);
    var optionNamesTranslated = new Queue<string>(optionNamesTask.Result);
    var sizesTranslated = new Queue<string>(sizesTask.Result);
    var staticTextTranslated = staticTextTask.Result;
}
@model List<Item>

<div class="products-container">
    @foreach (var item in Model.Select((value, index) => new { value, index})) {
        <div class="product">
            
            <div class="img-container">
                <img src="@item.value.Product.ImgUrl"/>
            </div>

            <!--Product Info-->
            <div class="product-info-container">
                <div class="product-name">
                    <h3>@productNamesTranslated.Dequeue()</h3>
                </div>
                <!--Product Options-->
                <div class="product-options-container">
                    <p class="product-option-size">@sizesTranslated.Dequeue()</p>
                    <div class="product-option-customizations">
                        <p>
                            @{
                                string? prevSeries = null;
                                var optionsText = new System.Text.StringBuilder();

                                foreach (var option in item.value.Options.Where(o => o.Series != "Size")) {
                                    if (prevSeries != null && option.Series != prevSeries) {
                                        optionsText.Append(" | ");
                                    } else if (!string.IsNullOrEmpty(prevSeries)) {
                                        optionsText.Append(", ");
                                    }

                                    optionsText.Append(option.Name);
                                    prevSeries = option.Series;
                                }
                            }
                            @await translator.TranslateText(optionsText.ToString())
                        </p>
                    </div>
                </div>
            </div>
                    
            <div class="edit-product-container">
                <div class="edit-center-container">
                    <div class="edit-product-count">
                        <button class="edit-product-count-btn" item-index="@item.index" title=@staticTextTranslated["Decrease quantity"]>-</button>
                        <p class="product-count">@item.value.Quantity</p>
                        <button class="edit-product-count-btn" item-index="@item.index" title=@staticTextTranslated["Increase quantity"]>+</button>
                    </div>

                    <button class="remove-product-btn" item-index="@item.index" title=@staticTextTranslated["Remove item"]>
                        @staticTextTranslated["Remove"]
                    </button>

                    <p class="product-cost">@item.value.Price().ToString("C")</p>
                    </div>
                
            </div>
        </div>
    }
</div>
