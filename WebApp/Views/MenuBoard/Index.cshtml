@{
    ViewData["Title"] = "Menu Board Page";
}

@{
    //The Menu Board Page serves as the central hub for displaying products, their ingredients, 
    //and categories within the Point of Sale (POS) system. It provides a user-friendly 
    //interface with a search bar for locating specific items. This page showcases 
    //products and their associated details, including product IDs, names, prices, and categories. 
    //Furthermore, it presents a comprehensive list of product ingredients for each item. 
    //Users can explore different product categories through interactive buttons, revealing 
    //specific product lists upon selection. The JavaScript functionality incorporated here 
    //enhances user experience by dynamically showing or hiding product lists based on 
    //category selections, allowing efficient navigation through the menu board.
}
<script type="module" src="~/js/menu.js" asp-append-version="true"></script>
<script type="module" src="~/js/loading-screen.js" asp-append-version="true"></script>
@using WebApp.Models.UnitOfWork
@using WebApp.APIs.GoogleTranslate
@model (List<Product> products, List<ProductIngredients> prodIngredients, List<string> productCategories)
@{
    var translate = new GoogleTranslate();

    var staticText = new List<string>() {
        "Menu Board Page",
        "Product Categories",
        "Search Products",
        "Search",
        "Products",
        "Product ID",
        "Name",
        "Price",
        "Series",
        "No products found.",
    };

    var staticTextTask = translate.TranslateAsDict(staticText);
    var productCategories = Model.productCategories;
    var productCategoryNames = Model.Item1!.Select(p => p.Name);
    var productSeries = Model.Item1!.Select(p => p.Series);

    var productCategoriesTask = translate.Translate(productCategories);
    var productCategoryNamesTask = translate.Translate(productCategoryNames);
    var productSeriesTask = translate.Translate(productSeries);

    await Task.WhenAll(staticTextTask, productCategoriesTask, productCategoryNamesTask, productSeriesTask);

    var staticTextTranslations = staticTextTask.Result;
    var productCategoriesTranslations = productCategoriesTask.Result;
    var productCategoryNamesTranslations = productCategoryNamesTask.Result;
    var productSeriesTranslations = productSeriesTask.Result;

    var productCategoryNamesTranslationsCopy = new Queue<string>(productCategoryNamesTranslations);
}

<div class="text-center">
    <h1 class="display-4 contrast">@staticTextTranslations["Menu Board Page"]</h1>
</div>

@if (Model.productCategories != null && Model.productCategories.Count > 0)
{
    <h2 class="contrast">@staticTextTranslations["Product Categories"]</h2>
    <div class="category-buttons contrast">
        @foreach (var category in Model.productCategories)
        {
            <button class="btn btn-primary category-button" data-category="@category">@productCategoriesTranslations.Dequeue()</button>
            <div class="product-list-for-category" data-category="@category" style="display: none;">
                @foreach (var product in Model.Item1!)
                {
                    if (product.Series == category)
                    {
                        <p>@productCategoryNamesTranslations.Dequeue()</p>
                        <!-- Display other product details as needed -->
                    }
                }
            </div>
        }
    </div>
}

<div class="row contrast">
    <div class="col-md-6">
        <form method="get" class="mb-3">
            <div class="input-group">
                <input type="text" class="form-control" name="search" placeholder="@staticTextTranslations["Search Products"]">
                <div class="input-group-append">
                    <button class="btn btn-primary" type="submit">@staticTextTranslations["Search"]</button>
                </div>
            </div>
        </form>
    </div>
</div>

@if (Model.Item1 != null && Model.Item1.Count > 0)
{
    <h2 class="contrast">@staticTextTranslations["Products"]</h2>
    <table class="table contrast">
        <thead>
            <tr>
                <th>@staticTextTranslations["Product ID"]</th>
                <th>@staticTextTranslations["Name"]</th>
                <th>@staticTextTranslations["Price"]</th>
                <th>@staticTextTranslations["Series"]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Model.Item1)
            {
                <tr class="product-row" data-category="@product.Series">
                    <td>@product.Id</td>
                    <td>
                        <a href="@Url.Action("ProductDetail", "MenuBoard", new { id = product.Id })">@productCategoryNamesTranslationsCopy.Dequeue()</a>
                    </td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@productSeriesTranslations.Dequeue()</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>@staticTextTranslations["No products found."]</p>
}

<!-- Ensure jQuery is included -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $('.category-button').on('click', function() {
        var category = $(this).data('category');
        
        // Hide all product lists initially
        $('.product-list-for-category').hide();
        
        // Show product list for the clicked category
        $('.product-list-for-category[data-category="' + category + '"]').show();
    });
</script>
