@using WebApp.Models.UnitOfWork
@using WebApp.APIs.GoogleTranslate
@model (List<Product>, List<Inventory>, List<Ingredient>, List<ProductIngredients>)

@{
    ViewData["Title"] = "Manager Page";
    var translator = new GoogleTranslate();

    var staticText = new List<string> {
        "ID",
        "Sales Report",
        "Excess Report",
        "Restock Report",
        "Sales Together",
        "Menu Items Popularity Analysis",
        "Product Name",
        "Sales",
        "Ingredient Name",
        "Item 1 Name",
        "Item 2 Name",
        "Frequency",
        "Enter Start Time",
        "Enter End Time",
        "Successful",
        "Fail",
        "Invalid Data Type"
    };

    var translatedText = await translator.TranslateAsDict(staticText);
}

<link rel="stylesheet" href="~/css/Manager.css" asp-append-version="true" />
<script src="~/js/manager.js" asp-append-version="true"></script>
<script src="~/js/loading-screen.js" asp-append-version="true"></script>



@{
    var headerPartialTask = Html.PartialAsync("_HeaderPartial");
    var productTablePartialTask = Html.PartialAsync("_ProductTablePartial", Model.Item1);
    var inventoryTablePartialTask = Html.PartialAsync("_InventoryTablePartial", (Model.Item2, Model.Item3));
    var prodIngredPartialTask = Html.PartialAsync("_ProdIngredPartial", (Model.Item3, Model.Item4));

    await Task.WhenAll(headerPartialTask, productTablePartialTask, inventoryTablePartialTask, prodIngredPartialTask);
}

@headerPartialTask.Result
@productTablePartialTask.Result
@inventoryTablePartialTask.Result
@prodIngredPartialTask.Result

<button id="salesReport" class="table-button" style="display:inline-block">@translatedText["Sales Report"]</button>
<button id="excessReport" class="table-button" style="display:inline-block">@translatedText["Excess Report"]</button>
<button id="restockReport" class="table-button" style="display:inline-block">@translatedText["Restock Report"]</button>
<button id="salesTogether" class="table-button" style="display:inline-block">@translatedText["Sales Together"]</button>
<button id="popularityAnalysis" class="table-button" style="display:inline-block">@translatedText["Menu Items Popularity Analysis"]</button>

<table id="salesReportTable" class="table contrast" style="display:none">
    <thead>
        <tr>
            <th>@translatedText["Product Name"]</th>
            <th>@translatedText["Sales"]</th>
        </tr>
    </thead>
</table>

<table id="excessReportTable" class="table contrast" style="display:none">
    <thead>
        <tr>
            <th>@translatedText["ID"]</th>
            <th>@translatedText["Ingredient Name"]</th>
        </tr>
    </thead>
</table>

<table id="restockReportTable" class="table contrast" style="display:none">
    <thead>
        <tr>
            <th>@translatedText["ID"]</th>
            <th>@translatedText["Ingredient Name"]</th>
        </tr>
    </thead>
</table>


<table id="salesTogetherTable" class="table contrast" style="display:none">
    <thead>
        <tr>
            <th>@translatedText["Item 1 Name"]</th>
            <th>@translatedText["Item 2 Name"]</th>
            <th>@translatedText["Frequency"]</th>
        </tr>
    </thead>
</table>

<table id="popularityAnalysisTable" class="table contrast" style="display:none">
    <thead>
        <tr>

        </tr>
    </thead>
</table>

<br>
<label for="starttime" id="slabel" style="display:inline-block">@translatedText["Enter Start Time"]: </label><br>
<input type="date" id="starttime" value="2023-07-01" style="display:inline-block"><br>

<label for="endtime" id = "elabel" style="display:inline-block">@translatedText["Enter End Time"]: </label><br>
<input type="date" id="endtime" value="2023-12-31" style="display:inline-block"><br>


<h2 id="saveSuccess" style="display:none">@translatedText["Successful"]</h2>
<h2 id="saveFail" style="display:none">@translatedText["Fail"]</h2>
<h2 id="saveFail2" style="display:none">@translatedText["Invalid Data Type"]</h2>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script>
    // Product Save Button Function
    document.getElementById('saveButtonProd').addEventListener('click', function() {
        console.log('Save button clicked');
        var editedCells = document.querySelectorAll('td.edited');
        var fail = false;
        var data = [];

        editedCells.forEach(function(cell) {
            if (cell.parentElement.querySelector('td:nth-child(2)').innerText == "") {
                cell.parentElement.querySelector('td:nth-child(2)').innerText = "N/A";
            }
            if (cell.parentElement.querySelector('td:nth-child(3)').innerText == "") {
                cell.parentElement.querySelector('td:nth-child(3)').innerText = "0";
            } 
            if (cell.parentElement.querySelector('td:nth-child(4)').innerText == "") {
                cell.parentElement.querySelector('td:nth-child(4)').innerText = "N/A";
            }
            if (cell.parentElement.querySelector('td:nth-child(5)').innerText == "") {
                cell.parentElement.querySelector('td:nth-child(5)').innerText = "https://gongchausa.s3.us-east-2.amazonaws.com/menu_pic/16344036541583579741616b05461df51.jpg";
            }

            if (isNaN(parseFloat(cell.parentElement.querySelector('td:nth-child(3)').innerText))) {
                cell.parentElement.querySelector('td:nth-child(3)').innerText = "0";
                fail = true;
            }

            data.push({
                id: cell.parentElement.querySelector('td:first-child').innerText,
                name: cell.parentElement.querySelector('td:nth-child(2)').innerText,
                price: cell.parentElement.querySelector('td:nth-child(3)').innerText,
                series: cell.parentElement.querySelector('td:nth-child(4)').innerText,
                imgurl: cell.parentElement.querySelector('td:nth-child(5)').innerText
            });
        });

        
        /* EXAMPLE
        $.ajax({
            url: "/Customer/AddToCart",
            type: "POST",
            data: { productID: productID, customizationIDs: customizationIDs },
            success: function (data) {
                console.log(data);
            },
            error: function () {
                console.log("Error adding to cart");
            }
        });
        */
        
        $.ajax({
            url: "/Manager/SaveProducts",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function (response) {
                if (fail == true) {
                    document.getElementById("saveFail2").style.display = 'block';
                    setTimeout(function() {
                        $('#saveFail2').fadeOut('fast');
                    }, 5000);
                }
                else {
                    document.getElementById("saveSuccess").style.display = 'block';
                    setTimeout(function() {
                        $('#saveSuccess').fadeOut('fast');
                    }, 5000);
                }
                console.log(response);
            },
            error: function () {
                document.getElementById("saveFail").style.display = 'block';
                setTimeout(function() {
                    $('#saveFail').fadeOut('fast');
                }, 5000);
                console.log("Error saving products");
            }
        });

        // Reset the edited cells
        editedCells.forEach(function(cell) {
            cell.classList.remove('edited');
        });
    });
    document.getElementById('addButtonProd').addEventListener('click', function() {
        var table = document.getElementById("prod-table");
        console.log('Add product button clicked');
        var row = table.insertRow(-1);
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        var cell4 = row.insertCell(3);
        var cell5 = row.insertCell(4);
        cell2.setAttribute("contenteditable", true);
        cell3.setAttribute("contenteditable", true);
        cell4.setAttribute("contenteditable", true);
        cell5.setAttribute("contenteditable", true);
        var cell6 = row.insertCell(5);
        cell6.innerHTML = '<input type="button" value="Edit Product Ingredients" onclick="editProductIngredients(this)"/>';
        var cell7 = row.insertCell(6);
        cell7.innerHTML = '<input type="button" value="Delete" onclick="deleteRowProd(this)"/>';
        cell2.addEventListener('input', function() {
                console.log('Cell changed');
                cell2.classList.add('edited');
            });
        cell3.addEventListener('input', function() {
                console.log('Cell changed');
                cell3.classList.add('edited');
            });
        cell4.addEventListener('input', function() {
                console.log('Cell changed');
                cell4.classList.add('edited');
            });
        cell5.addEventListener('input', function() {
                console.log('Cell changed');
                cell5.classList.add('edited');
            });
        $.ajax({
            url: "/Manager/AddProduct",
            type: "POST",
            contentType: "application/json",
            success: function (response) {
                cell1.innerHTML = response;
            },
            error: function () {
                console.log("Error saving products");
            }
        });
        
    });

    // Inventory Save Button Function
    document.getElementById('saveButtonInv').addEventListener('click', function() {
        console.log('Save button clicked');
        var editedCells = document.querySelectorAll('td.edited');
        var Data = [];
        var Data2 = [];
        var fail = false;

        function getCellValue(row, index) {
            var cellValue = row.querySelector('td:nth-child(' + index + ')').innerText;
            return cellValue.trim() === "" ? null : cellValue;
        }

        editedCells.forEach(function (cell) {
            if (cell.parentElement.querySelector('td:nth-child(3)').innerText == "") {
                cell.parentElement.querySelector('td:nth-child(3)').innerText = "N/A";
            } 
            if (cell.parentElement.querySelector('td:nth-child(4)').innerText == "") {
                cell.parentElement.querySelector('td:nth-child(4)').innerText = "0";
            }
            if (cell.parentElement.querySelector('td:nth-child(5)').innerText == "") {
                cell.parentElement.querySelector('td:nth-child(5)').innerText = "0";
            }
            if (isNaN(parseInt(cell.parentElement.querySelector('td:nth-child(4)').innerText))) {
                cell.parentElement.querySelector('td:nth-child(4)').innerText = "0";
                fail = true;
            }
            if (isNaN(parseInt(cell.parentElement.querySelector('td:nth-child(5)').innerText))) {
                cell.parentElement.querySelector('td:nth-child(5)').innerText = "0";
                fail = true;
            }
            
            var _id = getCellValue(cell.parentElement, 1) || "0";
            var _ingredientId = getCellValue(cell.parentElement, 2) || "0";
            var _quantity = getCellValue(cell.parentElement, 4) || "0";
            var _fillLevel = getCellValue(cell.parentElement, 5) || "0";
            Data.push({
                Id: parseInt(_id, 10),
                IngredientId: parseInt(_ingredientId, 10),
                Quantity: parseInt(_quantity, 10),
                FillLevel: parseInt(_fillLevel, 10)
            });

            Data2.push({
                Id: parseInt(_ingredientId, 10),
                Name: getCellValue(cell.parentElement, 3) || "N/A"
            });
        });


        // Reset the edited cells
        editedCells.forEach(function(cell) {
            cell.classList.remove('edited');
        });
        console.log(Data);
        console.log(Data2);
        var output = {
            data: JSON.stringify(Data),
            data2: JSON.stringify(Data2)
        };
        $.ajax({
            url: "/Manager/SaveInventory",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(output),
            success: function (data) {
                if (fail == true) {
                    document.getElementById("saveFail2").style.display = 'block';
                    setTimeout(function() {
                        $('#saveFail2').fadeOut('fast');
                    }, 5000);
                }
                else {
                    document.getElementById("saveSuccess").style.display = 'block';
                    setTimeout(function() {
                        $('#saveSuccess').fadeOut('fast');
                    }, 5000);
                }
                console.log(data);
            },
            error: function () {
                document.getElementById("saveFail").style.display = 'block';
                setTimeout(function() {
                    $('#saveFail').fadeOut('fast');
                }, 5000);
                console.log("Error saving inventory");
            }
        });
    });

    document.getElementById('addButtonInv').addEventListener('click', function() {
        var table = document.getElementById("inv-table");
        console.log('Add Inventory button clicked');
        var row = table.insertRow(-1);
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        var cell4 = row.insertCell(3);
        var cell5 = row.insertCell(4);
        var cell6 = row.insertCell(5);
        cell6.innerHTML = '<input type="button" value="Delete" onclick="deleteRowInv(this)"/>';
        cell3.setAttribute("contenteditable", true);
        cell4.setAttribute("contenteditable", true);
        cell5.setAttribute("contenteditable", true);
        cell3.addEventListener('input', function() {
                console.log('Cell changed');
                cell3.classList.add('edited');
            });
        cell4.addEventListener('input', function() {
                console.log('Cell changed');
                cell4.classList.add('edited');
            });
        cell5.addEventListener('input', function() {
                console.log('Cell changed');
                cell5.classList.add('edited');
            });
        $.ajax({
            url: "/Manager/AddInventory",
            type: "POST",
            contentType: "application/json",
            success: function (response) {
                cell1.innerHTML = response;
                cell2.innerHTML = (parseInt(response)-9000).toString();
            },
            error: function () {
                console.log("Error saving products");
            }
        });
    });



    var editableCells = document.querySelectorAll('[contenteditable=true]');

    // Check for changes in the editable cells
    editableCells.forEach(function(cell) {
        cell.addEventListener('input', function() {
            console.log('Cell changed');
            cell.classList.add('edited');
        });
    });
    function deleteRowProd(btn) {
        var row = btn.parentNode.parentNode;
        id = parseInt(row.querySelector('td:first-child').innerText);
        row.parentNode.removeChild(row);
        console.log(id);
        $.ajax({
            url: "/Manager/DeleteProduct/" + id,
            type: "DELETE",
            contentType: "application/json",
            data: "",
            success: function (response) {
                document.getElementById("saveSuccess").style.display = 'block';
                    setTimeout(function() {
                        $('#saveSuccess').fadeOut('fast');
                    }, 5000);
                console.log("Success deleting inventory");
            },
            error: function () {
                document.getElementById("saveFail").style.display = 'block';
                    setTimeout(function() {
                        $('#saveFail').fadeOut('fast');
                    }, 5000);
                console.log("Error deleting inventory");
            }
        });
    }
    function deleteRowInv(btn) {
        var row = btn.parentNode.parentNode;
        id = parseInt(row.querySelector('td:first-child').innerText);
        row.parentNode.removeChild(row);
        console.log(id);
        $.ajax({
            url: "/Manager/DeleteInventory/" + id,
            type: "DELETE",
            contentType: "application/json",
            data: "",
            success: function (response) {
                document.getElementById("saveSuccess").style.display = 'block';
                    setTimeout(function() {
                        $('#saveSuccess').fadeOut('fast');
                    }, 5000);
                console.log("Success deleting inventory");
            },
            error: function () {
                document.getElementById("saveFail").style.display = 'block';
                    setTimeout(function() {
                        $('#saveFail').fadeOut('fast');
                    }, 5000);
                console.log("Error deleting inventory");
            }
        });
    }
    var pid = 0;
    function editProductIngredients(btn) {
        ShowProductIngredients();
        var row = btn.parentNode.parentNode;
        id = parseInt(row.querySelector('td:first-child').innerText);
        pid = id;
        var input = document.getElementsByClassName('ingredients');
        $.ajax({
            url: "/Manager/GetProductIngredients/" + id,
            type: "GET",
            contentType: "application/json",
            data: "",
            success: function (response) {
                for(var i = 0; input[i]; ++i) {
                    for(var name of response) {
                        if (input[i].value == name) {                            
                            document.getElementById(input[i].value).checked = true;
                        }
                    }
                }
                document.getElementById("saveSuccess").style.display = 'block';
                    setTimeout(function() {
                        $('#saveSuccess').fadeOut('fast');
                    }, 5000);
                console.log("Success getting product ingredients");
            },
            error: function () {
                document.getElementById("saveFail").style.display = 'block';
                    setTimeout(function() {
                        $('#saveFail').fadeOut('fast');
                    }, 5000);
                console.log("Error getting product ingredients");
            }
        });
    }
    document.getElementById('cancel').addEventListener('click', function() {
        ShowProductPage();
    });
    document.getElementById('confirm').addEventListener('click', function() {
        var input = document.getElementsByClassName('ingredients');
        var output = [];
        output.push(pid.toString());
        for(var i = 0; input[i]; ++i) {
            if (input[i].checked) {
                output.push(input[i].value);
            }
        }
        $.ajax({
            url: "/Manager/EditProductIngredients",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(output),
            success: function (response) {
                document.getElementById("saveSuccess").style.display = 'block';
                    setTimeout(function() {
                        $('#saveSuccess').fadeOut('fast');
                    }, 5000);
                console.log("Success editing product ingredients");
            },
            error: function () {
                document.getElementById("saveFail").style.display = 'block';
                    setTimeout(function() {
                        $('#saveFail').fadeOut('fast');
                    }, 5000);
                console.log("Error editing product ingredients");
            }
        });
        ShowProductPage();
    });
</script> 